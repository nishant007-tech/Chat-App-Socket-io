{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(SERVER);\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const [msg, setmsg] = useState(\"\");\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n\n  const readInput = e => {\n    setmsg(e.target.value);\n  };\n\n  if (match) {\n    var friendId = match.params.id;\n  } // add User\n\n\n  useEffect(() => {\n    socket.emit(\"adduser\", userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n\n    if (socket) {\n      socket.emit('updateOnlineUsers');\n    }\n\n    socket.on('privatemessage', pvtMsg => {\n      setNewestSocketPrivateMessage(pvtMsg);\n    });\n    return () => {\n      if (socket) {\n        socket.removeAllListeners();\n      }\n    };\n  }, [username, foundUser._id, userId, newestSocketPrivateMessage]);\n  useEffect(() => {\n    try {\n      let isSubscribed = true;\n\n      const findUser = async () => {\n        if (friendId) {\n          const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n          if (returnedUser && isSubscribed) {\n            setFoundUser(returnedUser.data);\n          }\n        }\n      };\n\n      findUser();\n\n      const loadPrivateMessages = async () => {\n        if (foundUser._id) {\n          const foundMessages = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n          if (foundMessages.data.length > 0 && isSubscribed) {\n            setFoundMessages(foundMessages.data);\n          }\n        }\n      };\n\n      loadPrivateMessages();\n      return () => isSubscribed = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [foundUser._id, friendId, userId]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (msg.length > 0) {\n      socket.emit(\"privatemsg\", {\n        content: msg,\n        username: username,\n        userId: userId,\n        receiver: friendId\n      });\n    } else {\n      alert(\"Message Shouldn't be Empty!\");\n    }\n\n    setmsg(\"\");\n  };\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser,\n          foundMessages: foundMessages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(ShowMessages, {\n            foundMessages: foundMessages,\n            userId: userId,\n            friendId: friendId,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: submitHandler,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sendmsgForm\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sendFormInner\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  value: msg,\n                  disabled: friendId ? false : true,\n                  autoComplete: \"off\",\n                  onChange: readInput,\n                  name: \"inputMsg\",\n                  type: \"text\",\n                  placeholder: \"Write here....\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  name: \"inputMsg\",\n                  type: \"submit\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 76\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"pgJuAvUZ64wXySJN5bxxjmfpmUg=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","io","useSelector","SERVER","SERVER_URL","UsersList","axios","ShowMessages","socket","ChatBox","match","msg","setmsg","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","readInput","e","target","value","friendId","params","id","emit","on","users","existingMessages","pvtMsg","removeAllListeners","_id","isSubscribed","findUser","returnedUser","get","data","loadPrivateMessages","length","error","console","log","submitHandler","preventDefault","content","receiver","alert","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nconst socket = io(SERVER);\n\nfunction ChatBox({ match }) {\n    const [msg, setmsg] = useState(\"\");\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n\n    const readInput = (e) => {\n        setmsg(e.target.value);\n    }\n    if (match) {\n        var friendId = match.params.id;\n    }\n    // add User\n    useEffect(() => {\n        socket.emit(\"adduser\", userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        })\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n        if (socket) {\n            socket.emit('updateOnlineUsers');\n        }\n        socket.on('privatemessage', (pvtMsg) => {\n            setNewestSocketPrivateMessage(pvtMsg);\n        });\n        return () => {\n            if (socket) {\n                socket.removeAllListeners();\n            }\n        };\n    }, [username, foundUser._id, userId, newestSocketPrivateMessage])\n\n\n\n\n    useEffect(() => {\n        try {\n            let isSubscribed = true;\n            const findUser = async () => {\n                if (friendId) {\n                    const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                    if (returnedUser && isSubscribed) {\n                        setFoundUser(returnedUser.data);\n                    }\n                }\n            };\n            findUser();\n\n            const loadPrivateMessages = async () => {\n                if (foundUser._id) {\n                    const foundMessages = await axios.get(\n                        `${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`\n                    );\n                    if (foundMessages.data.length > 0 && isSubscribed) {\n                        setFoundMessages(foundMessages.data);\n                    }\n                }\n            };\n            loadPrivateMessages();\n            return () => (isSubscribed = false);\n\n        } catch (error) {\n            console.log(error);\n        }\n    }, [foundUser._id, friendId, userId]);\n\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (msg.length > 0) {\n            socket.emit(\"privatemsg\", {\n                content: msg,\n                username: username,\n                userId: userId,\n                receiver: friendId\n            });\n        } else {\n            alert(\"Message Shouldn't be Empty!\")\n        }\n        setmsg(\"\");\n    }\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} foundMessages={foundMessages} />\n                    <div className=\"rightChatContainer\">\n                        <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                        <form onSubmit={submitHandler}>\n                            <div className=\"sendmsgForm\" >\n                                <div className=\"sendFormInner\" >\n                                    <input value={msg} disabled={friendId ? false : true} autoComplete=\"off\" onChange={readInput} name=\"inputMsg\" type=\"text\" placeholder=\"Write here....\" />\n                                    <button name=\"inputMsg\" type=\"submit\"> <i className=\"fa fa-send\"></i></button>\n                                </div>\n                            </div>\n                        </form>\n                    </div >\n                </div >\n            </div >\n\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}