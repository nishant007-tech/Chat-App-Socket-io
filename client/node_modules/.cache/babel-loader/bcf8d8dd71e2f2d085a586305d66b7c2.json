{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport io from 'socket.io-client';\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport { DoEncrypt } from './aes';\nimport { getAllMessages } from './actions/user_actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket = io(SERVER);\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [users, setusers] = useState([]);\n  let [conversations, setconversations] = useState([]);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n  const [msg, setmsg] = useState(\"\");\n  const [msgread, setmsgread] = useState([{\n    read: true,\n    authorId: null\n  }]);\n  var friendId = match === null || match === void 0 ? void 0 : match.params.id;\n  let readMsg = useRef();\n  useEffect(() => {\n    socket.on('privatemessage', pm => {\n      if (pm.authorId === foundUser._id || pm.authorId === userId) {\n        setNewestSocketPrivateMessage(pm);\n      } else {\n        setmsgread([{\n          read: false,\n          authorId: pm.authorId\n        }]);\n      }\n    });\n    return () => socket.removeAllListeners('privatemessage');\n  }, [foundUser, userId]);\n  useEffect(() => {\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n  }, [newestSocketPrivateMessage]);\n  useEffect(() => {\n    socket.emit('adduser', userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n    return () => socket.removeAllListeners('getusers');\n  }, [userId, username]);\n  useEffect(() => {\n    let isSubscribed = true;\n\n    const findUser = async () => {\n      if (friendId) {\n        const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n        if (returnedUser && isSubscribed) {\n          setFoundUser(returnedUser.data);\n        }\n      }\n    };\n\n    findUser();\n\n    const loadPrivateMessages = async () => {\n      if (friendId) {\n        const foundMsg = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n        if (isSubscribed) {\n          setFoundMessages(foundMsg.data);\n        }\n      }\n    };\n\n    loadPrivateMessages();\n    return () => isSubscribed = false;\n  }, [friendId, userId]);\n  useEffect(() => {\n    async function func() {\n      let response = await dispatch(getAllMessages());\n      let unique = [...new Set(response.payload.data.messages.flatMap(item => {\n        if (item.receiver === userID) {\n          return item.author + \"|\" + item.authorId;\n        }\n\n        if (item.authorId === userID) {\n          return item.receiverName + \"|\" + item.receiver;\n        } else {\n          return null;\n        }\n      }))];\n      setusers(unique.map(item => item !== null && item.split(\"|\")));\n    }\n\n    func();\n  }, [dispatch, userID]);\n\n  const handleReadMsg = userId => {\n    if (msgread[0].authorId === userId) {\n      msgread[0].authorId = null;\n      msgread[0].read = true;\n    }\n  };\n\n  useEffect(() => {\n    if (users.length > 0) {\n      let data = [];\n\n      for (let i = 0; i < users.length; i++) {\n        var value = users[i];\n\n        for (let j = 0; j < value.length - 1; j++) {\n          if (value !== false && value !== undefined) {\n            data.push({\n              \"userId\": value[j + 1],\n              \"username\": value[j]\n            });\n          }\n        }\n      }\n\n      if (data.length > 0) {\n        let bool = data.some(item => item.userId === foundUser._id);\n\n        if (!bool) {\n          setconversations(data);\n          setconversations(prev => [...prev, {\n            \"userId\": foundUser._id,\n            \"username\": foundUser.name\n          }]);\n        } else {\n          setconversations(data);\n        }\n      }\n    }\n  }, [foundUser, users, userID]);\n\n  const readInput = e => {\n    setmsg(e.target.value);\n  };\n\n  const handleFileUpload = e => {\n    readMsg.current.value = e.target.files[0].name;\n    setmsg(e.target.files[0]);\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault(); //if message has length zero it means either it is a file or user try to send an empty message\n\n    if (msg.length > 0) {\n      try {\n        let encryptMsg = DoEncrypt(msg);\n        const message = {\n          author: username,\n          authorId: userId,\n          content: encryptMsg,\n          receiver: foundUser._id,\n          receiverName: foundUser.name,\n          participants: [userId, foundUser._id],\n          type: 'textMessage'\n        };\n        const res = await axios.post(`${SERVER_URL}/messages`, message);\n        setFoundMessages(existingMessages => [...existingMessages, res.data]);\n\n        if ([res.data].length > 0) {\n          socket.emit(\"privatemsg\", message);\n        }\n\n        setmsg(\"\");\n        readMsg.current.value = \"\";\n      } catch (err) {\n        console.log(err);\n      }\n    } //check that message is file\n    else if (msg.name) {\n        try {\n          let formData = new FormData();\n          formData.append('author', username);\n          formData.append('authorId', userId);\n          formData.append('content', msg);\n          formData.append('receiver', foundUser._id);\n          formData.append('receiverName', foundUser.name);\n          formData.append('participants', [userId, foundUser._id]);\n          formData.append('type', '');\n          const res = await axios.post(`${SERVER_URL}/messages`, formData);\n          setFoundMessages(existingMessages => [...existingMessages, res.data]); // such as Axios or fetch, can accept a FormData object as a body. It is encoded and sent out with Content-Type: multipart/form-data. and value are in form of key and pairs.Method to console log= console.log(...formData);\n\n          if ([res.data].length > 0) {\n            socket.emit(\"privatemsg\", res.data);\n          }\n\n          setmsg(\"\");\n          readMsg.current.value = \"\";\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        alert(\"Message Shouldn't be Empty!\");\n      }\n  };\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser,\n          msgread: msgread\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(ShowMessages, {\n            foundMessages: foundMessages,\n            userId: userId,\n            friendId: friendId,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: submitHandler,\n            encType: \"multipart/form-data\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sendmsgForm\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sendFormInner\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: readMsg,\n                  disabled: friendId ? false : true,\n                  autoComplete: \"off\",\n                  onChange: readInput,\n                  name: \"inputMsg\",\n                  type: \"text\",\n                  placeholder: \"Write here....\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  name: \"inputMsg\",\n                  type: \"submit\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 76\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleFileUpload,\n                type: \"file\",\n                id: \"upload\",\n                hidden: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"upload\",\n                children: /*#__PURE__*/_jsxDEV(AddBoxRoundedIcon, {\n                  color: \"secondary\",\n                  id: \"Uploadbutton\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"ZVMH2hCOBpsbuPLjPIenJMCPzLY=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","useRef","useSelector","SERVER","SERVER_URL","UsersList","axios","ShowMessages","io","AddBoxRoundedIcon","DoEncrypt","getAllMessages","socket","ChatBox","match","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","users","setusers","conversations","setconversations","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","msg","setmsg","msgread","setmsgread","read","authorId","friendId","params","id","readMsg","on","pm","_id","removeAllListeners","existingMessages","emit","isSubscribed","findUser","returnedUser","get","data","loadPrivateMessages","foundMsg","func","response","dispatch","unique","Set","payload","messages","flatMap","item","receiver","userID","author","receiverName","map","split","handleReadMsg","length","i","value","j","undefined","push","bool","some","prev","name","readInput","e","target","handleFileUpload","current","files","submitHandler","preventDefault","encryptMsg","message","content","participants","type","res","post","err","console","log","formData","FormData","append","alert","setTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,UAAnC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,wBAA/B;;AAEA,IAAIC,MAAM,GAAGJ,EAAE,CAACL,MAAD,CAAf;;AACA,SAASU,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA4B;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMoB,MAAM,GAAGjB,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACK,YAAN,CAAmBC,IAA7B,CAA1B;AACA,QAAMC,QAAQ,GAAGpB,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACK,YAAN,CAAmBE,QAA7B,CAA5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,EAAD,CAAlC;AACA,MAAI,CAAC0B,aAAD,EAAgBC,gBAAhB,IAAoC3B,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC4B,0BAAD,EAA6BC,6BAA7B,IAA8D7B,QAAQ,CAAC,IAAD,CAA5E;AACA,QAAM,CAAC8B,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgC,aAAD,EAAgBC,gBAAhB,IAAoCjC,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACkC,GAAD,EAAMC,MAAN,IAAgBnC,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACoC,OAAD,EAAUC,UAAV,IAAwBrC,QAAQ,CAAC,CAAC;AACpCsC,IAAAA,IAAI,EAAE,IAD8B;AAEpCC,IAAAA,QAAQ,EAAE;AAF0B,GAAD,CAAD,CAAtC;AAIA,MAAIC,QAAQ,GAAGzB,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAE0B,MAAP,CAAcC,EAA7B;AACA,MAAIC,OAAO,GAAGzC,MAAM,EAApB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,MAAM,CAAC+B,EAAP,CAAU,gBAAV,EAA4BC,EAAE,IAAI;AAC9B,UAAIA,EAAE,CAACN,QAAH,KAAgBT,SAAS,CAACgB,GAA1B,IAAiCD,EAAE,CAACN,QAAH,KAAgBnB,MAArD,EAA6D;AACzDS,QAAAA,6BAA6B,CAACgB,EAAD,CAA7B;AACH,OAFD,MAEO;AACHR,QAAAA,UAAU,CAAC,CAAC;AACRC,UAAAA,IAAI,EAAE,KADE;AAERC,UAAAA,QAAQ,EAAEM,EAAE,CAACN;AAFL,SAAD,CAAD,CAAV;AAIH;AACJ,KATD;AAUA,WAAQ,MAAM1B,MAAM,CAACkC,kBAAP,CAA0B,gBAA1B,CAAd;AACH,GAZQ,EAYN,CAACjB,SAAD,EAAYV,MAAZ,CAZM,CAAT;AAcAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,0BAAJ,EAAgC;AAC5BK,MAAAA,gBAAgB,CAACe,gBAAgB,IAAI,CACjC,GAAGA,gBAD8B,EAEjCpB,0BAFiC,CAArB,CAAhB;AAIH;AACJ,GAPQ,EAON,CAACA,0BAAD,CAPM,CAAT;AASA3B,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,MAAM,CAACoC,IAAP,CAAY,SAAZ,EAAuB7B,MAAvB,EAA+BG,QAA/B;AACAV,IAAAA,MAAM,CAAC+B,EAAP,CAAU,UAAV,EAAuBpB,KAAD,IAAW;AAC7BL,MAAAA,cAAc,CAAC,CAACK,KAAD,CAAD,CAAd;AACH,KAFD;AAGA,WAAQ,MAAMX,MAAM,CAACkC,kBAAP,CAA0B,UAA1B,CAAd;AACH,GANQ,EAMN,CAAC3B,MAAD,EAASG,QAAT,CANM,CAAT;AASAtB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiD,YAAY,GAAG,IAAnB;;AACA,UAAMC,QAAQ,GAAG,YAAY;AACzB,UAAIX,QAAJ,EAAc;AACV,cAAMY,YAAY,GAAG,MAAM7C,KAAK,CAAC8C,GAAN,CAAW,GAAEhD,UAAW,aAAYmC,QAAS,EAA7C,CAA3B;;AACA,YAAIY,YAAY,IAAIF,YAApB,EAAkC;AAC9BnB,UAAAA,YAAY,CAACqB,YAAY,CAACE,IAAd,CAAZ;AACH;AACJ;AACJ,KAPD;;AAQAH,IAAAA,QAAQ;;AAER,UAAMI,mBAAmB,GAAG,YAAY;AACpC,UAAIf,QAAJ,EAAc;AACV,cAAMgB,QAAQ,GAAG,MAAMjD,KAAK,CAAC8C,GAAN,CAAW,GAAEhD,UAAW,wBAAuBe,MAAO,aAAYoB,QAAS,EAA3E,CAAvB;;AACA,YAAIU,YAAJ,EAAkB;AACdjB,UAAAA,gBAAgB,CAACuB,QAAQ,CAACF,IAAV,CAAhB;AACH;AACJ;AACJ,KAPD;;AAQAC,IAAAA,mBAAmB;AACnB,WAAO,MAAOL,YAAY,GAAG,KAA7B;AACH,GAtBQ,EAsBN,CAACV,QAAD,EAAWpB,MAAX,CAtBM,CAAT;AAyBAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAewD,IAAf,GAAsB;AAClB,UAAIC,QAAQ,GAAG,MAAMC,QAAQ,CAAC/C,cAAc,EAAf,CAA7B;AACA,UAAIgD,MAAM,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQH,QAAQ,CAACI,OAAT,CAAiBR,IAAjB,CAAsBS,QAAtB,CAA+BC,OAA/B,CAAuCC,IAAI,IAAI;AACpE,YAAIA,IAAI,CAACC,QAAL,KAAkBC,MAAtB,EAA8B;AAC1B,iBAAQF,IAAI,CAACG,MAAL,GAAc,GAAd,GAAoBH,IAAI,CAAC1B,QAAjC;AACH;;AAAC,YAAI0B,IAAI,CAAC1B,QAAL,KAAkB4B,MAAtB,EAA8B;AAC5B,iBAAQF,IAAI,CAACI,YAAL,GAAoB,GAApB,GAA0BJ,IAAI,CAACC,QAAvC;AACH,SAFC,MAEK;AACH,iBAAO,IAAP;AACH;AACJ,OARwB,CAAR,CAAJ,CAAb;AASAzC,MAAAA,QAAQ,CAACmC,MAAM,CAACU,GAAP,CAAWL,IAAI,IAAIA,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACM,KAAL,CAAW,GAAX,CAApC,CAAD,CAAR;AACH;;AACDd,IAAAA,IAAI;AACP,GAfQ,EAeN,CAACE,QAAD,EAAWQ,MAAX,CAfM,CAAT;;AAgBA,QAAMK,aAAa,GAAIpD,MAAD,IAAY;AAC9B,QAAIgB,OAAO,CAAC,CAAD,CAAP,CAAWG,QAAX,KAAwBnB,MAA5B,EAAoC;AAChCgB,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWG,QAAX,GAAsB,IAAtB;AACAH,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACH;AACJ,GALD;;AAOArC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIuB,KAAK,CAACiD,MAAN,GAAe,CAAnB,EAAsB;AAClB,UAAInB,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlD,KAAK,CAACiD,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,YAAIC,KAAK,GAAGnD,KAAK,CAACkD,CAAD,CAAjB;;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACF,MAAN,GAAe,CAAnC,EAAsCG,CAAC,EAAvC,EAA2C;AACvC,cAAID,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAKE,SAAjC,EAA4C;AACxCvB,YAAAA,IAAI,CAACwB,IAAL,CAAU;AAAE,wBAAUH,KAAK,CAACC,CAAC,GAAG,CAAL,CAAjB;AAA0B,0BAAYD,KAAK,CAACC,CAAD;AAA3C,aAAV;AACH;AACJ;AACJ;;AACD,UAAItB,IAAI,CAACmB,MAAL,GAAc,CAAlB,EAAqB;AACjB,YAAIM,IAAI,GAAGzB,IAAI,CAAC0B,IAAL,CAAUf,IAAI,IACrBA,IAAI,CAAC7C,MAAL,KAAgBU,SAAS,CAACgB,GADnB,CAAX;;AAGA,YAAI,CAACiC,IAAL,EAAW;AACPpD,UAAAA,gBAAgB,CAAC2B,IAAD,CAAhB;AACA3B,UAAAA,gBAAgB,CAACsD,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAU;AAAE,sBAAUnD,SAAS,CAACgB,GAAtB;AAA2B,wBAAYhB,SAAS,CAACoD;AAAjD,WAAV,CAAT,CAAhB;AACH,SAHD,MAGO;AACHvD,UAAAA,gBAAgB,CAAC2B,IAAD,CAAhB;AACH;AACJ;AAEJ;AACJ,GAxBQ,EAwBN,CAACxB,SAAD,EAAYN,KAAZ,EAAmB2C,MAAnB,CAxBM,CAAT;;AA2BA,QAAMgB,SAAS,GAAIC,CAAD,IAAO;AACrBjD,IAAAA,MAAM,CAACiD,CAAC,CAACC,MAAF,CAASV,KAAV,CAAN;AACH,GAFD;;AAGA,QAAMW,gBAAgB,GAAIF,CAAD,IAAO;AAC5BzC,IAAAA,OAAO,CAAC4C,OAAR,CAAgBZ,KAAhB,GAAwBS,CAAC,CAACC,MAAF,CAASG,KAAT,CAAe,CAAf,EAAkBN,IAA1C;AACA/C,IAAAA,MAAM,CAACiD,CAAC,CAACC,MAAF,CAASG,KAAT,CAAe,CAAf,CAAD,CAAN;AACH,GAHD;;AAIA,QAAMC,aAAa,GAAG,MAAOL,CAAP,IAAa;AAC/BA,IAAAA,CAAC,CAACM,cAAF,GAD+B,CAE/B;;AACA,QAAIxD,GAAG,CAACuC,MAAJ,GAAa,CAAjB,EAAoB;AAChB,UAAI;AACA,YAAIkB,UAAU,GAAGhF,SAAS,CAACuB,GAAD,CAA1B;AACA,cAAM0D,OAAO,GAAG;AACZxB,UAAAA,MAAM,EAAE7C,QADI;AAEZgB,UAAAA,QAAQ,EAAEnB,MAFE;AAGZyE,UAAAA,OAAO,EAAEF,UAHG;AAIZzB,UAAAA,QAAQ,EAAEpC,SAAS,CAACgB,GAJR;AAKZuB,UAAAA,YAAY,EAAEvC,SAAS,CAACoD,IALZ;AAMZY,UAAAA,YAAY,EAAE,CAAC1E,MAAD,EAASU,SAAS,CAACgB,GAAnB,CANF;AAOZiD,UAAAA,IAAI,EAAE;AAPM,SAAhB;AASA,cAAMC,GAAG,GAAG,MAAMzF,KAAK,CAAC0F,IAAN,CAAY,GAAE5F,UAAW,WAAzB,EAAqCuF,OAArC,CAAlB;AACA3D,QAAAA,gBAAgB,CAACe,gBAAgB,IAAI,CACjC,GAAGA,gBAD8B,EAEjCgD,GAAG,CAAC1C,IAF6B,CAArB,CAAhB;;AAIA,YAAI,CAAC0C,GAAG,CAAC1C,IAAL,EAAWmB,MAAX,GAAoB,CAAxB,EAA2B;AACvB5D,UAAAA,MAAM,CAACoC,IAAP,CAAY,YAAZ,EAA0B2C,OAA1B;AACH;;AACDzD,QAAAA,MAAM,CAAC,EAAD,CAAN;AACAQ,QAAAA,OAAO,CAAC4C,OAAR,CAAgBZ,KAAhB,GAAwB,EAAxB;AAEH,OAtBD,CAsBE,OAAOuB,GAAP,EAAY;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,KA1BD,CA0BC;AA1BD,SA2BK,IAAIhE,GAAG,CAACgD,IAAR,EAAc;AACf,YAAI;AACA,cAAImB,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,UAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BhF,QAA1B;AACA8E,UAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BnF,MAA5B;AACAiF,UAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BrE,GAA3B;AACAmE,UAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BzE,SAAS,CAACgB,GAAtC;AACAuD,UAAAA,QAAQ,CAACE,MAAT,CAAgB,cAAhB,EAAgCzE,SAAS,CAACoD,IAA1C;AACAmB,UAAAA,QAAQ,CAACE,MAAT,CAAgB,cAAhB,EAAgC,CAACnF,MAAD,EAASU,SAAS,CAACgB,GAAnB,CAAhC;AACAuD,UAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,EAAxB;AACA,gBAAMP,GAAG,GAAG,MAAMzF,KAAK,CAAC0F,IAAN,CAAY,GAAE5F,UAAW,WAAzB,EAAqCgG,QAArC,CAAlB;AACApE,UAAAA,gBAAgB,CAACe,gBAAgB,IAAI,CACjC,GAAGA,gBAD8B,EAEjCgD,GAAG,CAAC1C,IAF6B,CAArB,CAAhB,CAVA,CAcA;;AACA,cAAI,CAAC0C,GAAG,CAAC1C,IAAL,EAAWmB,MAAX,GAAoB,CAAxB,EAA2B;AACvB5D,YAAAA,MAAM,CAACoC,IAAP,CAAY,YAAZ,EAA0B+C,GAAG,CAAC1C,IAA9B;AACH;;AACDnB,UAAAA,MAAM,CAAC,EAAD,CAAN;AACAQ,UAAAA,OAAO,CAAC4C,OAAR,CAAgBZ,KAAhB,GAAwB,EAAxB;AAEH,SArBD,CAqBE,OAAOuB,GAAP,EAAY;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AAEJ,OA1BI,MA2BA;AACDM,QAAAA,KAAK,CAAC,6BAAD,CAAL;AACH;AACJ,GA5DD;;AA+DA,MAAIpF,MAAJ,EAAY;AACR,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACI,QAAC,SAAD;AAAW,UAAA,WAAW,EAAEF,WAAxB;AAAqC,UAAA,SAAS,EAAEY,SAAhD;AAA2D,UAAA,OAAO,EAAEM;AAApE;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA,kCACI,QAAC,YAAD;AAAc,YAAA,aAAa,EAAEJ,aAA7B;AAA4C,YAAA,MAAM,EAAEZ,MAApD;AAA4D,YAAA,QAAQ,EAAEoB,QAAtE;AAAgF,YAAA,SAAS,EAAEV;AAA3F;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAM,YAAA,QAAQ,EAAE2D,aAAhB;AAA+B,YAAA,OAAO,EAAC,qBAAvC;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,sCACI;AAAK,gBAAA,SAAS,EAAC,eAAf;AAAA,wCACI;AAAO,kBAAA,GAAG,EAAE9C,OAAZ;AAAqB,kBAAA,QAAQ,EAAEH,QAAQ,GAAG,KAAH,GAAW,IAAlD;AAAwD,kBAAA,YAAY,EAAC,KAArE;AAA2E,kBAAA,QAAQ,EAAE2C,SAArF;AAAgG,kBAAA,IAAI,EAAC,UAArG;AAAgH,kBAAA,IAAI,EAAC,MAArH;AAA4H,kBAAA,WAAW,EAAC;AAAxI;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAQ,kBAAA,IAAI,EAAC,UAAb;AAAwB,kBAAA,IAAI,EAAC,QAA7B;AAAA,+CAAuC;AAAG,oBAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,0BAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAKI;AAAO,gBAAA,QAAQ,EAAEG,gBAAjB;AAAmC,gBAAA,IAAI,EAAC,MAAxC;AAA+C,gBAAA,EAAE,EAAC,QAAlD;AAA2D,gBAAA,MAAM;AAAjE;AAAA;AAAA;AAAA;AAAA,sBALJ,eAMI;AAAO,gBAAA,OAAO,EAAC,QAAf;AAAA,uCACI,QAAC,iBAAD;AAAmB,kBAAA,KAAK,EAAC,WAAzB;AAAqC,kBAAA,EAAE,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAsBH,GAvBD,MAuBO;AACH;AACAmB,IAAAA,UAAU,CAAC,MAAM;AACbxF,MAAAA,QAAQ,CAAC,uCAAD,CAAR;AACH,KAFS,EAEP,GAFO,CAAV;AAGA,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BAA+B;AAAA,kBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AACJ;;GAlOQF,O;UAGUX,W,EACEA,W;;;KAJZW,O;AAoOT,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nimport io from 'socket.io-client'\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport { DoEncrypt } from './aes';\nimport { getAllMessages } from './actions/user_actions';\n\nlet socket = io(SERVER);\nfunction ChatBox({ match }) {\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [users, setusers] = useState([]);\n    let [conversations, setconversations] = useState([]);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n    const [msg, setmsg] = useState(\"\");\n    const [msgread, setmsgread] = useState([{\n        read: true,\n        authorId: null\n    }]);\n    var friendId = match?.params.id;\n    let readMsg = useRef();\n    useEffect(() => {\n        socket.on('privatemessage', pm => {\n            if (pm.authorId === foundUser._id || pm.authorId === userId) {\n                setNewestSocketPrivateMessage(pm);\n            } else {\n                setmsgread([{\n                    read: false,\n                    authorId: pm.authorId\n                }]);\n            }\n        });\n        return (() => socket.removeAllListeners('privatemessage'));\n    }, [foundUser, userId]);\n\n    useEffect(() => {\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n    }, [newestSocketPrivateMessage]);\n\n    useEffect(() => {\n        socket.emit('adduser', userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        });\n        return (() => socket.removeAllListeners('getusers'))\n    }, [userId, username]);\n\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const findUser = async () => {\n            if (friendId) {\n                const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                if (returnedUser && isSubscribed) {\n                    setFoundUser(returnedUser.data);\n                }\n            }\n        };\n        findUser();\n\n        const loadPrivateMessages = async () => {\n            if (friendId) {\n                const foundMsg = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n                if (isSubscribed) {\n                    setFoundMessages(foundMsg.data);\n                }\n            }\n        };\n        loadPrivateMessages();\n        return () => (isSubscribed = false);\n    }, [friendId, userId]);\n\n\n    useEffect(() => {\n        async function func() {\n            let response = await dispatch(getAllMessages());\n            let unique = [...new Set(response.payload.data.messages.flatMap(item => {\n                if (item.receiver === userID) {\n                    return (item.author + \"|\" + item.authorId);\n                } if (item.authorId === userID) {\n                    return (item.receiverName + \"|\" + item.receiver);\n                } else {\n                    return null\n                }\n            }))];\n            setusers(unique.map(item => item !== null && item.split(\"|\")));\n        }\n        func();\n    }, [dispatch, userID])\n    const handleReadMsg = (userId) => {\n        if (msgread[0].authorId === userId) {\n            msgread[0].authorId = null;\n            msgread[0].read = true;\n        }\n    }\n\n    useEffect(() => {\n        if (users.length > 0) {\n            let data = [];\n            for (let i = 0; i < users.length; i++) {\n                var value = users[i];\n                for (let j = 0; j < value.length - 1; j++) {\n                    if (value !== false && value !== undefined) {\n                        data.push({ \"userId\": value[j + 1], \"username\": value[j] })\n                    }\n                }\n            }\n            if (data.length > 0) {\n                let bool = data.some(item => (\n                    item.userId === foundUser._id\n                ))\n                if (!bool) {\n                    setconversations(data);\n                    setconversations(prev => [...prev, { \"userId\": foundUser._id, \"username\": foundUser.name }]);\n                } else {\n                    setconversations(data);\n                }\n            }\n\n        }\n    }, [foundUser, users, userID]);\n\n\n    const readInput = (e) => {\n        setmsg(e.target.value);\n    }\n    const handleFileUpload = (e) => {\n        readMsg.current.value = e.target.files[0].name;\n        setmsg(e.target.files[0]);\n    }\n    const submitHandler = async (e) => {\n        e.preventDefault();\n        //if message has length zero it means either it is a file or user try to send an empty message\n        if (msg.length > 0) {\n            try {\n                let encryptMsg = DoEncrypt(msg);\n                const message = {\n                    author: username,\n                    authorId: userId,\n                    content: encryptMsg,\n                    receiver: foundUser._id,\n                    receiverName: foundUser.name,\n                    participants: [userId, foundUser._id],\n                    type: 'textMessage'\n                }\n                const res = await axios.post(`${SERVER_URL}/messages`, message);\n                setFoundMessages(existingMessages => [\n                    ...existingMessages,\n                    res.data\n                ]);\n                if ([res.data].length > 0) {\n                    socket.emit(\"privatemsg\", message);\n                }\n                setmsg(\"\");\n                readMsg.current.value = \"\";\n\n            } catch (err) {\n                console.log(err);\n            }\n        }//check that message is file\n        else if (msg.name) {\n            try {\n                let formData = new FormData();\n                formData.append('author', username)\n                formData.append('authorId', userId)\n                formData.append('content', msg)\n                formData.append('receiver', foundUser._id)\n                formData.append('receiverName', foundUser.name)\n                formData.append('participants', [userId, foundUser._id])\n                formData.append('type', '');\n                const res = await axios.post(`${SERVER_URL}/messages`, formData);\n                setFoundMessages(existingMessages => [\n                    ...existingMessages,\n                    res.data\n                ]);\n                // such as Axios or fetch, can accept a FormData object as a body. It is encoded and sent out with Content-Type: multipart/form-data. and value are in form of key and pairs.Method to console log= console.log(...formData);\n                if ([res.data].length > 0) {\n                    socket.emit(\"privatemsg\", res.data);\n                }\n                setmsg(\"\");\n                readMsg.current.value = \"\";\n\n            } catch (err) {\n                console.log(err);\n            }\n\n        }\n        else {\n            alert(\"Message Shouldn't be Empty!\")\n        }\n    }\n\n\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} msgread={msgread} />\n                    <div className=\"rightChatContainer\">\n                        <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                        <form onSubmit={submitHandler} encType='multipart/form-data'>\n                            <div className=\"sendmsgForm\" >\n                                <div className=\"sendFormInner\" >\n                                    <input ref={readMsg} disabled={friendId ? false : true} autoComplete=\"off\" onChange={readInput} name=\"inputMsg\" type=\"text\" placeholder=\"Write here....\" />\n                                    <button name=\"inputMsg\" type=\"submit\"> <i className=\"fa fa-send\"></i></button>\n                                </div>\n                                <input onChange={handleFileUpload} type=\"file\" id=\"upload\" hidden />\n                                <label htmlFor=\"upload\">\n                                    <AddBoxRoundedIcon color=\"secondary\" id=\"Uploadbutton\" />\n                                </label>\n                            </div>\n                        </form>\n                    </div>\n                </div >\n            </div >\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}