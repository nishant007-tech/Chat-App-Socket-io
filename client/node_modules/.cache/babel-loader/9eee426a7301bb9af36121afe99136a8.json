{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n  const [msg, setmsg] = useState(\"\");\n  var friendId = match === null || match === void 0 ? void 0 : match.params.id;\n  let readMsg = useRef();\n  useEffect(() => {\n    socket = io(SERVER);\n    console.log(\"rerendered\");\n    socket.on('privatemessage', pm => {\n      console.log(pm);\n      setNewestSocketPrivateMessage(pm);\n    });\n    return () => socket.removeAllListeners('privatemessage');\n  }, []);\n  useEffect(() => {\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n  }, [newestSocketPrivateMessage]);\n  useEffect(() => {\n    socket.emit('adduser', userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n    return () => socket.removeAllListeners('getusers');\n  }, [userId, username]);\n  useEffect(() => {\n    let isSubscribed = true;\n\n    const findUser = async () => {\n      if (friendId) {\n        const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n        if (returnedUser && isSubscribed) {\n          setFoundUser(returnedUser.data);\n        }\n      }\n    };\n\n    findUser();\n\n    const loadPrivateMessages = async () => {\n      if (friendId) {\n        const foundMsg = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n        if (foundMsg.data.length > 0 && isSubscribed) {\n          setFoundMessages(foundMsg.data);\n        }\n      }\n    };\n\n    loadPrivateMessages();\n    return () => isSubscribed = false;\n  }, [friendId, userId]);\n\n  const readInput = e => {\n    setmsg(e.target.value);\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault();\n\n    if (msg.length > 0) {\n      try {\n        const message = {\n          author: username,\n          authorId: userId,\n          content: msg,\n          receiver: foundUser._id,\n          participants: [userId, foundUser._id]\n        };\n        const res = await axios.post(`${SERVER_URL}/messages`, message);\n\n        if ([res.data].length > 0) {\n          socket.emit(\"privatemsg\", message);\n          setFoundMessages([...foundMessages, res.data]);\n        }\n\n        setmsg(\"\");\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      alert(\"Message Shouldn't be Empty!\");\n    }\n  };\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser,\n          foundMessages: foundMessages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(ShowMessages, {\n            foundMessages: foundMessages,\n            userId: userId,\n            friendId: friendId,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: submitHandler,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sendmsgForm\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sendFormInner\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: readMsg,\n                  disabled: friendId ? false : true,\n                  autoComplete: \"off\",\n                  onChange: readInput,\n                  name: \"inputMsg\",\n                  type: \"text\",\n                  placeholder: \"Write here....\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  name: \"inputMsg\",\n                  type: \"submit\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 76\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"us4LCFCkBmx+f3NahihYo7kiOIE=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","useRef","useSelector","SERVER","SERVER_URL","UsersList","axios","ShowMessages","Myinput","io","socket","ChatBox","match","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","msg","setmsg","friendId","params","id","readMsg","console","log","on","pm","removeAllListeners","existingMessages","emit","users","isSubscribed","findUser","returnedUser","get","data","loadPrivateMessages","foundMsg","length","readInput","e","target","value","submitHandler","preventDefault","message","author","authorId","content","receiver","_id","participants","res","post","err","alert","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\nimport io from 'socket.io-client'\n\nlet socket;\nfunction ChatBox({ match }) {\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n    const [msg, setmsg] = useState(\"\");\n    var friendId = match?.params.id;\n    let readMsg = useRef();\n\n\n    useEffect(() => {\n        socket = io(SERVER);\n        console.log(\"rerendered\");\n        socket.on('privatemessage', pm => {\n            console.log(pm);\n            setNewestSocketPrivateMessage(pm);\n        });\n        return (() => socket.removeAllListeners('privatemessage'));\n    }, []);\n\n    useEffect(() => {\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n    }, [newestSocketPrivateMessage]);\n\n    useEffect(() => {\n        socket.emit('adduser', userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        });\n        return (() => socket.removeAllListeners('getusers'))\n    }, [userId, username]);\n\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const findUser = async () => {\n            if (friendId) {\n                const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                if (returnedUser && isSubscribed) {\n                    setFoundUser(returnedUser.data);\n                }\n            }\n        };\n        findUser();\n\n        const loadPrivateMessages = async () => {\n            if (friendId) {\n                const foundMsg = await axios.get(\n                    `${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`\n                );\n                if (foundMsg.data.length > 0 && isSubscribed) {\n                    setFoundMessages(foundMsg.data);\n                }\n            }\n        };\n\n        loadPrivateMessages();\n        return () => (isSubscribed = false);\n    }, [friendId, userId]);\n\n    const readInput = (e) => {\n        setmsg(e.target.value);\n    }\n\n    const submitHandler = async (e) => {\n        e.preventDefault();\n        if (msg.length > 0) {\n            try {\n                const message = {\n                    author: username,\n                    authorId: userId,\n                    content: msg,\n                    receiver: foundUser._id,\n                    participants: [userId, foundUser._id],\n                }\n                const res = await axios.post(`${SERVER_URL}/messages`, message);\n                if ([res.data].length > 0) {\n                    socket.emit(\"privatemsg\", message);\n                    setFoundMessages([...foundMessages, res.data]);\n                }\n                setmsg(\"\");\n\n            } catch (err) {\n                console.log(err);\n            }\n        }\n        else {\n            alert(\"Message Shouldn't be Empty!\")\n        }\n    }\n\n\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} foundMessages={foundMessages} />\n                    <div className=\"rightChatContainer\">\n                        <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                        <form onSubmit={submitHandler}>\n                            <div className=\"sendmsgForm\" >\n                                <div className=\"sendFormInner\" >\n                                    <input ref={readMsg} disabled={friendId ? false : true} autoComplete=\"off\" onChange={readInput} name=\"inputMsg\" type=\"text\" placeholder=\"Write here....\" />\n                                    <button name=\"inputMsg\" type=\"submit\"> <i className=\"fa fa-send\"></i></button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div >\n            </div >\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}