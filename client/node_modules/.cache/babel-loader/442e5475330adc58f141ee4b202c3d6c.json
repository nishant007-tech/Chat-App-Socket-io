{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport io from 'socket.io-client';\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport { DoEncrypt } from './aes';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket = io(SERVER);\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n  const [msg, setmsg] = useState(\"\");\n  const [loader, setloader] = useState(false);\n  const [msgread, setmsgread] = useState([{\n    read: true,\n    authorId: null\n  }]);\n  var friendId = match === null || match === void 0 ? void 0 : match.params.id;\n  let readMsg = useRef();\n  useEffect(() => {\n    socket.on('privatemessage', pm => {\n      if (pm.authorId === foundUser._id || pm.authorId === userId) {\n        setNewestSocketPrivateMessage(pm);\n      } else {\n        setmsgread([{\n          read: false,\n          authorId: pm.authorId\n        }]);\n      }\n    });\n    return () => socket.removeAllListeners('privatemessage');\n  }, [foundUser, userId]);\n  useEffect(() => {\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n  }, [newestSocketPrivateMessage]);\n  useEffect(() => {\n    socket.emit('adduser', userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n    return () => socket.removeAllListeners('getusers');\n  }, [userId, username]);\n  useEffect(() => {\n    const getData = async () => {\n      if (friendId) {\n        const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n        if (returnedUser) {\n          setFoundUser(returnedUser.data);\n        }\n\n        const foundMsg = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n        if (foundMsg.data.length > 0) {\n          setFoundMessages(foundMsg.data);\n        }\n      }\n    };\n\n    getData();\n  }, [friendId, userId]);\n\n  const readInput = e => {\n    setmsg(e.target.value);\n  };\n\n  const handleFileUpload = e => {\n    readMsg.current.value = e.target.files[0].name;\n    setmsg(e.target.files[0]);\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault(); //if message has length zero it means either it is a file or user try to send an empty message\n\n    if (msg.length > 0) {\n      try {\n        let encryptMsg = DoEncrypt(msg);\n        const message = {\n          author: username,\n          authorId: userId,\n          content: encryptMsg,\n          receiver: foundUser._id,\n          receiverName: foundUser.name,\n          participants: [userId, foundUser._id],\n          type: 'textMessage'\n        };\n        setloader(true);\n        const res = await axios.post(`${SERVER_URL}/messages`, message);\n        setFoundMessages(existingMessages => [...existingMessages, res.data]);\n\n        if ([res.data].length > 0) {\n          socket.emit(\"privatemsg\", message);\n          setloader(false);\n        }\n\n        setmsg(\"\");\n        readMsg.current.value = \"\";\n      } catch (err) {\n        console.log(err);\n      }\n    } //check that message is file\n    else if (msg.name) {\n        try {\n          let formData = new FormData();\n          formData.append('author', username);\n          formData.append('authorId', userId);\n          formData.append('content', msg);\n          formData.append('receiver', foundUser._id);\n          formData.append('receiverName', foundUser.name);\n          formData.append('participants', [userId, foundUser._id]);\n          formData.append('type', '');\n          setloader(true);\n          const res = await axios.post(`${SERVER_URL}/messages`, formData);\n          setFoundMessages(existingMessages => [...existingMessages, res.data]); // such as Axios or fetch, can accept a FormData object as a body. It is encoded and sent out with Content-Type: multipart/form-data. and value are in form of key and pairs.Method to console log= console.log(...formData);\n\n          if ([res.data].length > 0) {\n            socket.emit(\"privatemsg\", res.data);\n            setloader(false);\n          }\n\n          setmsg(\"\");\n          readMsg.current.value = \"\";\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        alert(\"Message Shouldn't be Empty!\");\n      }\n  };\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser,\n          msgread: msgread\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [loader ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 35\n          }, this) : \"\", /*#__PURE__*/_jsxDEV(ShowMessages, {\n            foundMessages: foundMessages,\n            userId: userId,\n            friendId: friendId,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: submitHandler,\n            encType: \"multipart/form-data\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sendmsgForm\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sendFormInner\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: readMsg,\n                  disabled: friendId ? false : true,\n                  autoComplete: \"off\",\n                  onChange: readInput,\n                  name: \"inputMsg\",\n                  type: \"text\",\n                  placeholder: \"Write here....\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  name: \"inputMsg\",\n                  type: \"submit\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 76\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleFileUpload,\n                type: \"file\",\n                id: \"upload\",\n                hidden: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"upload\",\n                children: /*#__PURE__*/_jsxDEV(AddBoxRoundedIcon, {\n                  color: \"secondary\",\n                  id: \"Uploadbutton\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"KOrJ5GET8tM0RDOBKaDOv43ux/M=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","useRef","useSelector","SERVER","SERVER_URL","UsersList","axios","ShowMessages","io","AddBoxRoundedIcon","DoEncrypt","CircularProgress","socket","ChatBox","match","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","msg","setmsg","loader","setloader","msgread","setmsgread","read","authorId","friendId","params","id","readMsg","on","pm","_id","removeAllListeners","existingMessages","emit","users","getData","returnedUser","get","data","foundMsg","length","readInput","e","target","value","handleFileUpload","current","files","name","submitHandler","preventDefault","encryptMsg","message","author","content","receiver","receiverName","participants","type","res","post","err","console","log","formData","FormData","append","alert","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nimport io from 'socket.io-client'\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport { DoEncrypt } from './aes';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nlet socket = io(SERVER);\nfunction ChatBox({ match }) {\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n    const [msg, setmsg] = useState(\"\");\n    const [loader, setloader] = useState(false);\n    const [msgread, setmsgread] = useState([{\n        read: true,\n        authorId: null\n    }]);\n    var friendId = match?.params.id;\n    let readMsg = useRef();\n    useEffect(() => {\n        socket.on('privatemessage', pm => {\n            if (pm.authorId === foundUser._id || pm.authorId === userId) {\n                setNewestSocketPrivateMessage(pm);\n            } else {\n                setmsgread([{\n                    read: false,\n                    authorId: pm.authorId\n                }]);\n            }\n        });\n        return (() => socket.removeAllListeners('privatemessage'));\n    }, [foundUser, userId]);\n\n    useEffect(() => {\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n    }, [newestSocketPrivateMessage]);\n\n    useEffect(() => {\n        socket.emit('adduser', userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        });\n        return (() => socket.removeAllListeners('getusers'))\n    }, [userId, username]);\n\n    useEffect(() => {\n        const getData = async () => {\n            if (friendId) {\n                const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                if (returnedUser) {\n                    setFoundUser(returnedUser.data);\n                }\n                const foundMsg = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n                if (foundMsg.data.length > 0) {\n                    setFoundMessages(foundMsg.data);\n                }\n            }\n        }\n        getData();\n    }, [friendId, userId]);\n\n    const readInput = (e) => {\n        setmsg(e.target.value);\n    }\n    const handleFileUpload = (e) => {\n        readMsg.current.value = e.target.files[0].name;\n        setmsg(e.target.files[0]);\n    }\n    const submitHandler = async (e) => {\n        e.preventDefault();\n        //if message has length zero it means either it is a file or user try to send an empty message\n        if (msg.length > 0) {\n            try {\n                let encryptMsg = DoEncrypt(msg);\n                const message = {\n                    author: username,\n                    authorId: userId,\n                    content: encryptMsg,\n                    receiver: foundUser._id,\n                    receiverName: foundUser.name,\n                    participants: [userId, foundUser._id],\n                    type: 'textMessage'\n                }\n                setloader(true);\n                const res = await axios.post(`${SERVER_URL}/messages`, message);\n                setFoundMessages(existingMessages => [\n                    ...existingMessages,\n                    res.data\n                ]);\n                if ([res.data].length > 0) {\n                    socket.emit(\"privatemsg\", message);\n                    setloader(false);\n                }\n                setmsg(\"\");\n                readMsg.current.value = \"\";\n\n            } catch (err) {\n                console.log(err);\n            }\n        }//check that message is file\n        else if (msg.name) {\n            try {\n                let formData = new FormData();\n                formData.append('author', username)\n                formData.append('authorId', userId)\n                formData.append('content', msg)\n                formData.append('receiver', foundUser._id)\n                formData.append('receiverName', foundUser.name)\n                formData.append('participants', [userId, foundUser._id])\n                formData.append('type', '');\n                setloader(true);\n                const res = await axios.post(`${SERVER_URL}/messages`, formData);\n                setFoundMessages(existingMessages => [\n                    ...existingMessages,\n                    res.data\n                ]);\n                // such as Axios or fetch, can accept a FormData object as a body. It is encoded and sent out with Content-Type: multipart/form-data. and value are in form of key and pairs.Method to console log= console.log(...formData);\n                if ([res.data].length > 0) {\n                    socket.emit(\"privatemsg\", res.data);\n                    setloader(false);\n\n                }\n                setmsg(\"\");\n                readMsg.current.value = \"\";\n\n            } catch (err) {\n                console.log(err);\n            }\n\n        }\n        else {\n            alert(\"Message Shouldn't be Empty!\")\n        }\n    }\n\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} msgread={msgread} />\n                    <div className=\"rightChatContainer\">\n                        {loader ? <CircularProgress color=\"secondary\" /> : \"\"}\n                        <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                        <form onSubmit={submitHandler} encType='multipart/form-data'>\n                            <div className=\"sendmsgForm\" >\n                                <div className=\"sendFormInner\" >\n                                    <input ref={readMsg} disabled={friendId ? false : true} autoComplete=\"off\" onChange={readInput} name=\"inputMsg\" type=\"text\" placeholder=\"Write here....\" />\n                                    <button name=\"inputMsg\" type=\"submit\"> <i className=\"fa fa-send\"></i></button>\n                                </div>\n                                <input onChange={handleFileUpload} type=\"file\" id=\"upload\" hidden />\n                                <label htmlFor=\"upload\">\n                                    <AddBoxRoundedIcon color=\"secondary\" id=\"Uploadbutton\" />\n                                </label>\n                            </div>\n                        </form>\n                    </div>\n                </div >\n            </div >\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}