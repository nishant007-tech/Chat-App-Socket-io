{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const socket = useRef();\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n\n  if (match) {\n    var friendId = match.params.id;\n  } // add User\n\n\n  useEffect(() => {\n    socket.current = io(SERVER);\n    socket.emit(\"adduser\", userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n    socket.on('privatemessage', pvtMsg => {\n      setNewestSocketPrivateMessage(pvtMsg);\n    });\n\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n  }, []);\n  useEffect(() => {\n    socket.current.emit(\"addUser\", user._id);\n    socket.current.on(\"getUsers\", users => {\n      setOnlineUsers(user.followings.filter(f => users.some(u => u.userId === f)));\n    });\n  }, [user]);\n  useEffect(() => {\n    try {\n      let isSubscribed = true;\n\n      const findUser = async () => {\n        if (friendId) {\n          const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n          if (returnedUser && isSubscribed) {\n            setFoundUser(returnedUser.data);\n          }\n        }\n      };\n\n      findUser();\n\n      const loadPrivateMessages = async () => {\n        if (foundUser._id) {\n          const foundMessages = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n          if (foundMessages.data.length > 0 && isSubscribed) {\n            setFoundMessages(foundMessages.data);\n          }\n        }\n      };\n\n      loadPrivateMessages();\n      return () => isSubscribed = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [foundUser._id, friendId, userId]);\n  useEffect(() => {\n    if (socket) {\n      socket.emit('updateOnlineUsers');\n    }\n\n    return () => {\n      if (socket) {\n        socket.removeAllListeners();\n      }\n    };\n  }, []);\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser,\n          foundMessages: foundMessages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(ShowMessages, {\n            foundMessages: foundMessages,\n            userId: userId,\n            friendId: friendId,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Myinput, {\n            socket: socket,\n            userId: userId,\n            username: username,\n            friendId: friendId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"Tg679djZlFZPgDsMdm4MeXcnNEk=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","io","useSelector","SERVER","SERVER_URL","UsersList","axios","ShowMessages","Myinput","ChatBox","match","socket","useRef","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","friendId","params","id","current","emit","on","users","pvtMsg","existingMessages","_id","followings","filter","f","some","u","isSubscribed","findUser","returnedUser","get","data","loadPrivateMessages","length","error","console","log","removeAllListeners","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\n\nfunction ChatBox({ match }) {\n    const socket = useRef();\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n    if (match) {\n        var friendId = match.params.id;\n    }\n    // add User\n    useEffect(() => {\n        socket.current = io(SERVER);\n        socket.emit(\"adduser\", userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        });\n        socket.on('privatemessage', (pvtMsg) => {\n            setNewestSocketPrivateMessage(pvtMsg);\n        });\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n    }, []);\n    useEffect(() => {\n        socket.current.emit(\"addUser\", user._id);\n        socket.current.on(\"getUsers\", (users) => {\n            setOnlineUsers(\n                user.followings.filter((f) => users.some((u) => u.userId === f))\n            );\n        });\n    }, [user]);\n\n    useEffect(() => {\n        try {\n            let isSubscribed = true;\n            const findUser = async () => {\n                if (friendId) {\n                    const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                    if (returnedUser && isSubscribed) {\n                        setFoundUser(returnedUser.data);\n                    }\n                }\n            };\n            findUser();\n\n            const loadPrivateMessages = async () => {\n                if (foundUser._id) {\n                    const foundMessages = await axios.get(\n                        `${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`\n                    );\n                    if (foundMessages.data.length > 0 && isSubscribed) {\n                        setFoundMessages(foundMessages.data);\n                    }\n                }\n            };\n            loadPrivateMessages();\n            return () => (isSubscribed = false);\n\n        } catch (error) {\n            console.log(error);\n        }\n    }, [foundUser._id, friendId, userId]);\n\n    useEffect(() => {\n        if (socket) {\n            socket.emit('updateOnlineUsers');\n        }\n        return () => {\n            if (socket) {\n                socket.removeAllListeners();\n            }\n        };\n    }, []);\n\n\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} foundMessages={foundMessages} />\n                    <div className=\"rightChatContainer\">\n                        <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                        <Myinput socket={socket} userId={userId} username={username} friendId={friendId} />\n                    </div>\n                </div >\n            </div >\n\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}