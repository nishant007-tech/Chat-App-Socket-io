{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const socket = useRef();\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n\n  if (match) {\n    var friendId = match.params.id;\n  } // add User\n\n\n  useEffect(() => {\n    socket.current = io(SERVER);\n    socket.current.emit(\"adduser\", userId, username);\n    socket.current.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n  }, [userId, username]);\n  useEffect(() => {\n    socket.current.on('privatemessage', pvtMsg => {\n      setNewestSocketPrivateMessage(pvtMsg);\n    });\n\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n\n    return () => socket.current.close();\n  }, [newestSocketPrivateMessage]);\n  useEffect(() => {\n    try {\n      let isSubscribed = true;\n\n      const findUser = async () => {\n        if (friendId) {\n          const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n          if (returnedUser && isSubscribed) {\n            setFoundUser(returnedUser.data);\n          }\n        }\n      };\n\n      findUser();\n\n      const loadPrivateMessages = async () => {\n        if (foundUser._id) {\n          const foundMessages = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n          if (foundMessages.data.length > 0 && isSubscribed) {\n            setFoundMessages(foundMessages.data);\n          }\n        }\n      };\n\n      loadPrivateMessages();\n      return () => isSubscribed = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [foundUser._id, friendId, userId]); // useEffect(() => {\n  //     if (socket.current) {\n  //         socket.current.emit('updateOnlineUsers');\n  //     }\n  //     return () => {\n  //         if (socket.current) {\n  //             socket.current.removeAllListeners();\n  //         }\n  //     };\n  // }, []);\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser,\n          foundMessages: foundMessages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(ShowMessages, {\n            foundMessages: foundMessages,\n            userId: userId,\n            friendId: friendId,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Myinput, {\n            socket: socket.current,\n            userId: userId,\n            username: username,\n            friendId: friendId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"l1CG1zPiUqc3zWRC+5YyXkBGXMo=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","useRef","io","useSelector","SERVER","SERVER_URL","UsersList","axios","ShowMessages","Myinput","ChatBox","match","socket","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","friendId","params","id","current","emit","on","users","pvtMsg","existingMessages","close","isSubscribed","findUser","returnedUser","get","data","loadPrivateMessages","_id","length","error","console","log","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\n\nfunction ChatBox({ match }) {\n    const socket = useRef();\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n    if (match) {\n        var friendId = match.params.id;\n    }\n\n    // add User\n\n    useEffect(() => {\n        socket.current = io(SERVER);\n        socket.current.emit(\"adduser\", userId, username);\n        socket.current.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        });\n    }, [userId, username]);\n\n\n    useEffect(() => {\n\n        socket.current.on('privatemessage', (pvtMsg) => {\n            setNewestSocketPrivateMessage(pvtMsg);\n        });\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n        return (() => socket.current.close());\n    }, [newestSocketPrivateMessage]);\n\n\n    useEffect(() => {\n        try {\n            let isSubscribed = true;\n            const findUser = async () => {\n                if (friendId) {\n                    const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                    if (returnedUser && isSubscribed) {\n                        setFoundUser(returnedUser.data);\n                    }\n                }\n            };\n            findUser();\n\n            const loadPrivateMessages = async () => {\n                if (foundUser._id) {\n                    const foundMessages = await axios.get(\n                        `${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`\n                    );\n                    if (foundMessages.data.length > 0 && isSubscribed) {\n                        setFoundMessages(foundMessages.data);\n                    }\n                }\n            };\n            loadPrivateMessages();\n            return () => (isSubscribed = false);\n\n        } catch (error) {\n            console.log(error);\n        }\n    }, [foundUser._id, friendId, userId]);\n\n    // useEffect(() => {\n    //     if (socket.current) {\n    //         socket.current.emit('updateOnlineUsers');\n    //     }\n    //     return () => {\n    //         if (socket.current) {\n    //             socket.current.removeAllListeners();\n    //         }\n    //     };\n    // }, []);\n\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} foundMessages={foundMessages} />\n                    <div className=\"rightChatContainer\">\n                        <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                        <Myinput socket={socket.current} userId={userId} username={username} friendId={friendId} />\n                    </div>\n                </div >\n            </div >\n\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}