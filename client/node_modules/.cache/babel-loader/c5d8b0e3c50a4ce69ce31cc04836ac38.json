{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n\n  if (match) {\n    var friendId = match.params.id;\n  }\n\n  useEffect(() => {\n    socket.emit(\"updateOnlineUsers\");\n    return () => {\n      socket.removeAllListeners(\"privatemessage\", \"getusers\");\n    };\n  }, []);\n  useEffect(() => {\n    socket = io(SERVER);\n    socket.on('privatemessage', pm => {\n      console.log(pm);\n\n      if (pm.authorId === foundUser._id || pm.authorId === userId) {\n        setNewestSocketPrivateMessage(pm);\n      }\n    });\n  }, [foundUser._id, userId]);\n  useEffect(() => {\n    socket.emit('adduser', userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n  }, [userId, username]);\n  useEffect(() => {\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n  }, [newestSocketPrivateMessage]);\n  useEffect(() => {\n    try {\n      let isSubscribed = true;\n\n      const findUser = async () => {\n        const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n        if (returnedUser && isSubscribed) {\n          setFoundUser(returnedUser.data);\n        }\n      };\n\n      findUser();\n\n      const loadPrivateMessages = async () => {\n        const foundMessages = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n        if (foundMessages.data.length > 0 && isSubscribed) {\n          setFoundMessages(foundMessages.data);\n        }\n      };\n\n      loadPrivateMessages();\n      return () => isSubscribed = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [friendId, userId]);\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser,\n          foundMessages: foundMessages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(ShowMessages, {\n            foundMessages: foundMessages,\n            userId: userId,\n            friendId: friendId,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Myinput, {\n            socket: socket,\n            userId: userId,\n            username: username,\n            friendId: friendId,\n            foundUser: foundUser,\n            setOnlineUsers: setOnlineUsers,\n            setNewestSocketPrivateMessage: setNewestSocketPrivateMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"h2/1xmISBC1HqkYlnawP9HPL/Dw=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","useSelector","SERVER","SERVER_URL","UsersList","axios","ShowMessages","Myinput","io","socket","ChatBox","match","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","friendId","params","id","emit","removeAllListeners","on","pm","console","log","authorId","_id","users","existingMessages","isSubscribed","findUser","returnedUser","get","data","loadPrivateMessages","length","error","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\nimport io from 'socket.io-client'\n\nlet socket;\nfunction ChatBox({ match }) {\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n    if (match) {\n        var friendId = match.params.id;\n    }\n    useEffect(() => {\n        socket.emit(\"updateOnlineUsers\");\n        return (() => {\n            socket.removeAllListeners(\"privatemessage\", \"getusers\")\n        })\n    }, [])\n    useEffect(() => {\n        socket = io(SERVER)\n        socket.on('privatemessage', pm => {\n            console.log(pm);\n            if (pm.authorId === foundUser._id || pm.authorId === userId) {\n                setNewestSocketPrivateMessage(pm);\n            }\n        });\n    }, [foundUser._id, userId]);\n\n\n    useEffect(() => {\n        socket.emit('adduser', userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        });\n    }, [userId, username]);\n\n    useEffect(() => {\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n    }, [newestSocketPrivateMessage]);\n\n\n    useEffect(() => {\n        try {\n            let isSubscribed = true;\n            const findUser = async () => {\n                const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                if (returnedUser && isSubscribed) {\n                    setFoundUser(returnedUser.data);\n                }\n            };\n            findUser();\n\n            const loadPrivateMessages = async () => {\n                const foundMessages = await axios.get(\n                    `${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`\n                );\n                if (foundMessages.data.length > 0 && isSubscribed) {\n                    setFoundMessages(foundMessages.data);\n                }\n            };\n            loadPrivateMessages();\n            return () => (isSubscribed = false);\n\n        } catch (error) {\n            console.log(error);\n        }\n    }, [friendId, userId]);\n\n\n\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} foundMessages={foundMessages} />\n                    <div className=\"rightChatContainer\">\n                        <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                        <Myinput socket={socket} userId={userId} username={username} friendId={friendId} foundUser={foundUser} setOnlineUsers={setOnlineUsers} setNewestSocketPrivateMessage={setNewestSocketPrivateMessage} />\n                    </div>\n                </div >\n            </div >\n\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}