{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/usersList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom'; // import { useDispatch } from 'react-redux'\n// import { getAllMessages } from './actions/user_actions';\n\nimport MessageTwoToneIcon from '@material-ui/icons/MessageTwoTone';\nimport NotificationsActiveTwoToneIcon from '@material-ui/icons/NotificationsActiveTwoTone';\nimport PermIdentityTwoToneIcon from '@material-ui/icons/PermIdentityTwoTone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UsersList({\n  foundUser,\n  onlineUsers,\n  msgread,\n  conversations\n}) {\n  _s();\n\n  let userID = useSelector(state => state.user_reducer.user); // const dispatch = useDispatch();\n  // const [users, setusers] = useState([]);\n  // let [conversations, setconversations] = useState([]);\n\n  const username = useSelector(state => state.user_reducer.username); // useEffect(() => {\n  //     async function func() {\n  //         let response = await dispatch(getAllMessages());\n  //         let unique = [...new Set(response.payload.data.messages.flatMap(item => {\n  //             if (item.receiver === userID) {\n  //                 return (item.author + \"|\" + item.authorId);\n  //             } if (item.authorId === userID) {\n  //                 return (item.receiverName + \"|\" + item.receiver);\n  //             } else {\n  //                 return null\n  //             }\n  //         }))];\n  //         setusers(unique.map(item => item !== null && item.split(\"|\")));\n  //     }\n  //     func();\n  // }, [dispatch, userID])\n  // const handleReadMsg = (userId) => {\n  //     if (msgread[0].authorId === userId) {\n  //         msgread[0].authorId = null;\n  //         msgread[0].read = true;\n  //     }\n  // }\n  // useEffect(() => {\n  //     if (users.length > 0) {\n  //         let data = [];\n  //         for (let i = 0; i < users.length; i++) {\n  //             var value = users[i];\n  //             for (let j = 0; j < value.length - 1; j++) {\n  //                 if (value !== false && value !== undefined) {\n  //                     data.push({ \"userId\": value[j + 1], \"username\": value[j] })\n  //                 }\n  //             }\n  //         }\n  //         if (data.length > 0) {\n  //             let bool = data.some(item => (\n  //                 item.userId === foundUser._id\n  //             ))\n  //             if (!bool) {\n  //                 setconversations(data);\n  //                 setconversations(prev => [...prev, { \"userId\": foundUser._id, \"username\": foundUser.name }]);\n  //             } else {\n  //                 setconversations(data);\n  //             }\n  //         }\n  //     }\n  // }, [foundUser, users, userID]);\n\n  const handleReadMsg = userId => {\n    if (msgread[0].authorId === userId) {\n      msgread[0].authorId = null;\n      msgread[0].read = true;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"leftUsersContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      id: \"h3ForOnline\",\n      children: \"Online \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"onlineUsers\",\n      children: onlineUsers.length > 0 ? onlineUsers[0].map((elem, index) => elem.userId && elem.userId !== userID ? /*#__PURE__*/_jsxDEV(Link, {\n        to: `/chat/${elem.userId} `,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: elem.userId === foundUser._id ? \"leftUserContent userIsActive \" : \"leftUserContent\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(PermIdentityTwoToneIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: elem.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: elem.socketId ? \"fa fa-circle active\" : \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 37\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }, this) : elem.userId && /*#__PURE__*/_jsxDEV(Link, {\n        to: `/chat`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leftUserContent \",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tooltiptext\",\n              children: \"Talking To Oneself Not Allowed!!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(PermIdentityTwoToneIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [username, \"(Me)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-circle active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 41\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 37\n      }, this)) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"h3\",\n        children: \"Chats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflowY\",\n        children: conversations.length > 0 ? conversations.map((item, index) => item.userId !== undefined && /*#__PURE__*/_jsxDEV(Link, {\n          to: `/chat/${item.userId} `,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleReadMsg(item.userId),\n            className: item.userId === foundUser._id ? \"leftUserContent userIsActive\" : \"leftUserContent\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(PermIdentityTwoToneIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: item.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 45\n            }, this), msgread[0].authorId === item.userId ? /*#__PURE__*/_jsxDEV(NotificationsActiveTwoToneIcon, {\n              color: \"action\",\n              className: \"notiIcon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 53\n            }, this) : \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 41\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 37\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ifNoMsg\",\n          children: [/*#__PURE__*/_jsxDEV(MessageTwoToneIcon, {\n            color: \"action\",\n            className: \"ifNoConvo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" No Message Yet!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Start The Conversation!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UsersList, \"/s4JE4bTmQ4ht7EVAezMaiATQxE=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = UsersList;\nexport default UsersList;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersList\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/usersList.js"],"names":["React","useEffect","useState","useSelector","Link","MessageTwoToneIcon","NotificationsActiveTwoToneIcon","PermIdentityTwoToneIcon","UsersList","foundUser","onlineUsers","msgread","conversations","userID","state","user_reducer","user","username","handleReadMsg","userId","authorId","read","length","map","elem","index","_id","socketId","item","undefined"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n// import { useDispatch } from 'react-redux'\n// import { getAllMessages } from './actions/user_actions';\nimport MessageTwoToneIcon from '@material-ui/icons/MessageTwoTone';\nimport NotificationsActiveTwoToneIcon from '@material-ui/icons/NotificationsActiveTwoTone';\nimport PermIdentityTwoToneIcon from '@material-ui/icons/PermIdentityTwoTone';\n\nfunction UsersList({ foundUser, onlineUsers, msgread, conversations }) {\n    let userID = useSelector(state => state.user_reducer.user);\n    // const dispatch = useDispatch();\n    // const [users, setusers] = useState([]);\n    // let [conversations, setconversations] = useState([]);\n    const username = useSelector(state => state.user_reducer.username);\n    // useEffect(() => {\n    //     async function func() {\n    //         let response = await dispatch(getAllMessages());\n    //         let unique = [...new Set(response.payload.data.messages.flatMap(item => {\n    //             if (item.receiver === userID) {\n    //                 return (item.author + \"|\" + item.authorId);\n    //             } if (item.authorId === userID) {\n    //                 return (item.receiverName + \"|\" + item.receiver);\n    //             } else {\n    //                 return null\n    //             }\n    //         }))];\n    //         setusers(unique.map(item => item !== null && item.split(\"|\")));\n    //     }\n    //     func();\n    // }, [dispatch, userID])\n    // const handleReadMsg = (userId) => {\n    //     if (msgread[0].authorId === userId) {\n    //         msgread[0].authorId = null;\n    //         msgread[0].read = true;\n    //     }\n    // }\n    // useEffect(() => {\n    //     if (users.length > 0) {\n    //         let data = [];\n    //         for (let i = 0; i < users.length; i++) {\n    //             var value = users[i];\n    //             for (let j = 0; j < value.length - 1; j++) {\n    //                 if (value !== false && value !== undefined) {\n    //                     data.push({ \"userId\": value[j + 1], \"username\": value[j] })\n    //                 }\n    //             }\n    //         }\n    //         if (data.length > 0) {\n    //             let bool = data.some(item => (\n    //                 item.userId === foundUser._id\n    //             ))\n    //             if (!bool) {\n    //                 setconversations(data);\n    //                 setconversations(prev => [...prev, { \"userId\": foundUser._id, \"username\": foundUser.name }]);\n    //             } else {\n    //                 setconversations(data);\n    //             }\n    //         }\n\n    //     }\n    // }, [foundUser, users, userID]);\n    const handleReadMsg = (userId) => {\n        if (msgread[0].authorId === userId) {\n            msgread[0].authorId = null;\n            msgread[0].read = true;\n        }\n    }\n\n    return (\n        <div className=\"leftUsersContainer\">\n            <h3 id=\"h3ForOnline\">Online </h3>\n            <div className=\"onlineUsers\">\n                {\n                    onlineUsers.length > 0 ?\n                        onlineUsers[0].map((elem, index) => (\n                            elem.userId && elem.userId !== userID ?\n                                <Link key={index} to={`/chat/${elem.userId} `}>\n                                    <div className={elem.userId === foundUser._id ? \"leftUserContent userIsActive \" : \"leftUserContent\"}>\n                                        <span>\n                                            <PermIdentityTwoToneIcon />\n                                            <h3>{elem.username}</h3>\n                                        </span>\n                                        <i className={elem.socketId ? \"fa fa-circle active\" : \" \"}></i>\n                                    </div>\n                                </Link>\n                                :\n\n                                elem.userId && (\n                                    <Link key={index} to={`/chat`}>\n                                        <div className=\"leftUserContent \">\n                                            <span >\n                                                <span className=\"tooltiptext\">Talking To Oneself Not Allowed!!</span>\n                                                <PermIdentityTwoToneIcon />\n                                                <h3>{username}(Me)</h3>\n                                            </span>\n                                            <i className=\"fa fa-circle active\"></i>\n                                        </div>\n                                    </Link>\n                                ))\n                        )\n                        :\n                        \"\"\n                }\n            </div>\n            <div>\n                <h3 id=\"h3\">Chats</h3>\n                <div className=\"overflowY\">\n                    {\n                        conversations.length > 0 ?\n                            conversations.map((item, index) => (\n                                item.userId !== undefined && (\n                                    <Link key={index} to={`/chat/${item.userId} `}>\n                                        <div onClick={() => handleReadMsg(item.userId)} className={item.userId === foundUser._id ? \"leftUserContent userIsActive\" : \"leftUserContent\"}>\n                                            <span>\n                                                <PermIdentityTwoToneIcon />\n                                                <h3>{item.username}</h3>\n                                            </span>\n                                            {\n                                                msgread[0].authorId === item.userId ?\n                                                    <NotificationsActiveTwoToneIcon color=\"action\" className=\"notiIcon\" />\n                                                    :\n                                                    \"\"\n                                            }\n                                        </div>\n                                    </Link>)\n                            ))\n                            :\n                            <div className=\"ifNoMsg\">\n                                <MessageTwoToneIcon color=\"action\" className=\"ifNoConvo\" />\n                                <p> No Message Yet!</p>\n                                <i>Start The Conversation!</i>\n                            </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default UsersList\n"]},"metadata":{},"sourceType":"module"}