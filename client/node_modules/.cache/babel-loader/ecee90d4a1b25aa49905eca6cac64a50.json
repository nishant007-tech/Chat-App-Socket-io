{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport Typist from 'react-typist';\nimport { format } from 'timeago.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(SERVER);\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const [msg, setmsg] = useState(\"\");\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState([]);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n  const scrollRef = useRef();\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [foundMessages]);\n\n  const readInput = e => {\n    setmsg(e.target.value);\n  };\n\n  if (match) {\n    var friendId = match.params.id;\n  } // add User\n\n\n  useEffect(() => {\n    socket.emit(\"adduser\", userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n  }, [userId, username]);\n  useEffect(() => {\n    try {\n      let isSubscribed = true;\n\n      const findUser = async () => {\n        if (friendId) {\n          const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n          if (returnedUser && isSubscribed) {\n            setFoundUser(returnedUser.data);\n          }\n        }\n      };\n\n      findUser();\n\n      const loadPrivateMessages = async () => {\n        if (foundUser._id) {\n          const foundMessages = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n          if (foundMessages.data.length > 0 && isSubscribed) {\n            setFoundMessages(foundMessages.data); // scrollToBottom();\n          } // else {\n          //     setMoreMessagesExist(false);\n          // }\n\n        }\n      };\n\n      loadPrivateMessages();\n      return () => isSubscribed = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [foundUser._id, friendId, userId]);\n  useEffect(() => {\n    if (socket) {\n      socket.emit('updateOnlineUsers');\n    }\n\n    return () => {\n      if (socket) {\n        socket.removeAllListeners();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    socket.on('privatemessage', pvtMsg => {\n      console.log(\"pvt msg\", pvtMsg);\n\n      if (pvtMsg.authorId === foundUser._id || pvtMsg.authorId === userId) {\n        setNewestSocketPrivateMessage(pvtMsg);\n      }\n    });\n  }, [foundUser._id, userId]);\n  useEffect(() => {\n    if (newestSocketPrivateMessage.length > 0) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n  }, [newestSocketPrivateMessage]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (msg.length > 0) {\n      socket.emit(\"privatemsg\", {\n        content: msg,\n        username: username,\n        userId: userId,\n        receiver: friendId\n      });\n    } else {\n      alert(\"Message Shouldn't be Empty!\");\n    }\n\n    setmsg(\"\");\n  };\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rightChatContent\",\n            children: foundMessages.length > 0 && foundUser._id ? foundMessages.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: scrollRef,\n              className: data.authorId === userId ? \"right\" : \"left\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-user-circle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 50\n                }, this), \" \", data.author]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: data.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                children: format(data.createdAt)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 45\n              }, this)]\n            }, data._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 41\n            }, this)) : friendId ? /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Lets Start Conversation with \\\"\", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: [foundUser.name, \"\\\"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 75\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(Typist, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"typistContainer\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"chatHeadTxt\",\n                  children: \"Let's Chat \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \" Let's Talk Virtual\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Typist.Delay, {\n                  ms: 500\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"chatHeadTxt\",\n                  children: \"It's An Online live Conversation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: submitHandler,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sendmsgForm\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sendFormInner\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  value: msg,\n                  disabled: friendId ? false : true,\n                  autoComplete: \"off\",\n                  onChange: readInput,\n                  name: \"inputMsg\",\n                  type: \"text\",\n                  placeholder: \"Write here....\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  name: \"inputMsg\",\n                  type: \"submit\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 76\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"oicr/6Gj/jufKmyukOgCTJCiMwc=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","useRef","io","useSelector","SERVER","SERVER_URL","UsersList","axios","Typist","format","socket","ChatBox","match","msg","setmsg","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","scrollRef","current","scrollIntoView","behavior","readInput","e","target","value","friendId","params","id","emit","on","users","isSubscribed","findUser","returnedUser","get","data","loadPrivateMessages","_id","length","error","console","log","removeAllListeners","pvtMsg","authorId","existingMessages","submitHandler","preventDefault","content","receiver","alert","map","author","createdAt","name","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport Typist from 'react-typist';\nimport { format } from 'timeago.js';\n\nconst socket = io(SERVER);\n\nfunction ChatBox({ match }) {\n    const [msg, setmsg] = useState(\"\");\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState([]);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n\n\n    const scrollRef = useRef();\n    useEffect(() => {\n        scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [foundMessages]);\n\n    const readInput = (e) => {\n        setmsg(e.target.value);\n    }\n    if (match) {\n        var friendId = match.params.id;\n    }\n\n\n    // add User\n    useEffect(() => {\n        socket.emit(\"adduser\", userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        })\n    }, [userId, username])\n\n    useEffect(() => {\n        try {\n            let isSubscribed = true;\n            const findUser = async () => {\n                if (friendId) {\n                    const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                    if (returnedUser && isSubscribed) {\n                        setFoundUser(returnedUser.data);\n                    }\n                }\n            };\n            findUser();\n\n            const loadPrivateMessages = async () => {\n                if (foundUser._id) {\n                    const foundMessages = await axios.get(\n                        `${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`\n                    );\n                    if (foundMessages.data.length > 0 && isSubscribed) {\n                        setFoundMessages(foundMessages.data);\n                        // scrollToBottom();\n                    }// else {\n                    //     setMoreMessagesExist(false);\n                    // }\n                }\n            };\n            loadPrivateMessages();\n            return () => (isSubscribed = false);\n\n        } catch (error) {\n            console.log(error);\n        }\n    }, [foundUser._id, friendId, userId]);\n\n\n    useEffect(() => {\n        if (socket) {\n            socket.emit('updateOnlineUsers');\n        }\n        return () => {\n            if (socket) {\n                socket.removeAllListeners();\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        socket.on('privatemessage', (pvtMsg) => {\n            console.log(\"pvt msg\", pvtMsg);\n            if (pvtMsg.authorId === foundUser._id || pvtMsg.authorId === userId) {\n                setNewestSocketPrivateMessage(pvtMsg);\n            }\n        });\n    }, [foundUser._id, userId]);\n\n    useEffect(() => {\n        if (newestSocketPrivateMessage.length > 0) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n    }, [newestSocketPrivateMessage]);\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (msg.length > 0) {\n\n            socket.emit(\"privatemsg\", {\n                content: msg,\n                username: username,\n                userId: userId,\n                receiver: friendId\n            });\n        } else {\n            alert(\"Message Shouldn't be Empty!\")\n        }\n        setmsg(\"\");\n    }\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} />\n                    <div className=\"rightChatContainer\">\n                        <div className=\"rightChatContent\" >\n                            {\n                                foundMessages.length > 0 && foundUser._id ?\n                                    foundMessages.map((data) => (\n                                        <div ref={scrollRef} key={data._id} className={data.authorId === userId ? \"right\" : \"left\"}>\n                                            <h4> <i className=\"fa fa-user-circle\"></i> {data.author}</h4>\n                                            <p>{data.content}</p>\n                                            <i>{format(data.createdAt)}</i>\n                                        </div>\n                                    ))\n                                    :\n                                    friendId ?\n                                        <h3>Lets Start Conversation with \"<b>{foundUser.name}\"</b></h3>\n                                        :\n                                        <Typist >\n                                            <div className=\"typistContainer\">\n                                                <p className='chatHeadTxt'>Let's Chat </p>\n                                                <p> Let's Talk Virtual</p>\n                                                <Typist.Delay ms={500} />\n                                                <p className='chatHeadTxt'>It's An Online live Conversation</p>\n                                            </div>\n                                        </Typist>\n                            }\n                        </div>\n                        <form onSubmit={submitHandler}>\n                            <div className=\"sendmsgForm\" >\n                                <div className=\"sendFormInner\" >\n                                    <input value={msg} disabled={friendId ? false : true} autoComplete=\"off\" onChange={readInput} name=\"inputMsg\" type=\"text\" placeholder=\"Write here....\" />\n                                    <button name=\"inputMsg\" type=\"submit\"> <i className=\"fa fa-send\"></i></button>\n                                </div>\n                            </div>\n                        </form>\n                    </div >\n                </div >\n            </div >\n\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}