{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, memo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport io from 'socket.io-client';\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport { DoEncrypt } from './aes';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { setMessageIsRead } from './actions/chat_actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet socket = io(SERVER);\n\nfunction ChatBox({\n  match\n}) {\n  _s();\n\n  const [state, setstate] = useState(\"\");\n  const dispatch = useDispatch();\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n  const [msg, setmsg] = useState(\"\");\n  const [loader, setloader] = useState(false);\n  const [warning, setWarning] = useState(undefined);\n  var friendId = match === null || match === void 0 ? void 0 : match.params.id;\n  let readMsg = useRef();\n  useEffect(() => {\n    socket.on('privatemessage', pm => {\n      if (pm.authorId === foundUser._id || pm.authorId === userId) {\n        setNewestSocketPrivateMessage(pm);\n      } else {\n        dispatch(setMessageIsRead({\n          read: false,\n          authorId: pm.authorId\n        }));\n      }\n    });\n    return () => socket.removeAllListeners('privatemessage');\n  }, [foundUser, userId, dispatch]);\n  useEffect(() => {\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n  }, [newestSocketPrivateMessage]);\n  useEffect(() => {\n    socket.emit('adduser', userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n    return () => socket.removeAllListeners('getusers');\n  }, [userId, username]);\n  useEffect(() => {\n    const getData = async () => {\n      if (friendId) {\n        const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n        if (returnedUser) {\n          setFoundUser(returnedUser.data);\n        }\n\n        const foundMsg = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n        if (foundMsg.data.length > 0) {\n          setFoundMessages(foundMsg.data);\n        }\n      }\n    };\n\n    getData();\n  }, [userId, friendId]);\n\n  const readInput = e => {\n    setmsg(e.target.value);\n  };\n\n  const handleFileUpload = e => {\n    readMsg.current.value = e.target.files[0].name;\n    setmsg(e.target.files[0]);\n  };\n\n  const closeButtonhandler = () => {\n    setWarning(undefined);\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault(); //if message has length zero it means either it is a file or user try to send an empty message\n\n    if (msg.length > 0) {\n      try {\n        let encryptMsg = DoEncrypt(msg);\n        const message = {\n          author: username,\n          authorId: userId,\n          content: encryptMsg,\n          receiver: foundUser._id,\n          receiverName: foundUser.name,\n          participants: [userId, foundUser._id],\n          type: 'textMessage'\n        };\n        setloader(true);\n        setWarning(\"Reload If Content Like Pics/Videos Did'nt Load Properly!!\");\n        const res = await axios.post(`${SERVER_URL}/messages`, message);\n        setFoundMessages(existingMessages => [...existingMessages, res.data]);\n\n        if ([res.data].length > 0) {\n          socket.emit(\"privatemsg\", message);\n          setloader(false);\n        }\n\n        setmsg(\"\");\n        readMsg.current.value = \"\";\n      } catch (err) {\n        console.log(err);\n      }\n    } //check that message is file\n    else if (msg.name) {\n        try {\n          let formData = new FormData();\n          formData.append('author', username);\n          formData.append('authorId', userId);\n          formData.append('content', msg);\n          formData.append('receiver', foundUser._id);\n          formData.append('receiverName', foundUser.name);\n          formData.append('participants', [userId, foundUser._id]);\n          formData.append('type', '');\n          setloader(true);\n          setWarning(\"Reload If Content Like Pics/Videos Did'nt Load Properly!!\");\n          const res = await axios.post(`${SERVER_URL}/messages`, formData);\n          setFoundMessages(existingMessages => [...existingMessages, res.data]); // such as Axios or fetch, can accept a FormData object as a body. It is encoded and sent out with Content-Type: multipart/form-data. and value are in form of key and pairs.Method to console log= console.log(...formData);\n\n          if ([res.data].length > 0) {\n            socket.emit(\"privatemsg\", res.data);\n            setloader(false);\n          }\n\n          setmsg(\"\");\n          readMsg.current.value = \"\";\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        alert(\"Message Shouldn't be Empty!\");\n      }\n  };\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatContent\",\n          children: [/*#__PURE__*/_jsxDEV(UsersList, {\n            onlineUsers: onlineUsers,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rightChatContainer\",\n            children: [loader ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"secondary\",\n              className: \"spinLoader\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 39\n            }, this) : \"\", warning && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"error\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-exclamation-circle errorIcon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Warning:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 45\n                  }, this), \" \", warning]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: closeButtonhandler,\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(ShowMessages, {\n              foundMessages: foundMessages,\n              userId: userId,\n              friendId: friendId,\n              foundUser: foundUser\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: submitHandler,\n              encType: \"multipart/form-data\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sendmsgForm\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"sendFormInner\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    ref: readMsg,\n                    disabled: friendId ? false : true,\n                    autoComplete: \"off\",\n                    onChange: readInput,\n                    name: \"inputMsg\",\n                    type: \"text\",\n                    placeholder: \"Write here....\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    name: \"inputMsg\",\n                    type: \"submit\",\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fa fa-send\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 179,\n                      columnNumber: 80\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  disabled: friendId ? false : true,\n                  onChange: handleFileUpload,\n                  type: \"file\",\n                  id: \"upload\",\n                  hidden: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"upload\",\n                  children: /*#__PURE__*/_jsxDEV(AddBoxRoundedIcon, {\n                    color: \"secondary\",\n                    id: \"Uploadbutton\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"XMNZkH9bjGIl81AkmVNC636pdsA=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default _c2 = /*#__PURE__*/memo(ChatBox);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","useRef","memo","useSelector","useDispatch","SERVER","SERVER_URL","UsersList","axios","ShowMessages","io","AddBoxRoundedIcon","DoEncrypt","CircularProgress","setMessageIsRead","socket","ChatBox","match","state","setstate","dispatch","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","msg","setmsg","loader","setloader","warning","setWarning","undefined","friendId","params","id","readMsg","on","pm","authorId","_id","read","removeAllListeners","existingMessages","emit","users","getData","returnedUser","get","data","foundMsg","length","readInput","e","target","value","handleFileUpload","current","files","name","closeButtonhandler","submitHandler","preventDefault","encryptMsg","message","author","content","receiver","receiverName","participants","type","res","post","err","console","log","formData","FormData","append","alert","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, memo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nimport io from 'socket.io-client'\nimport AddBoxRoundedIcon from '@material-ui/icons/AddBoxRounded';\nimport { DoEncrypt } from './aes';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { setMessageIsRead } from './actions/chat_actions';\n\n\nlet socket = io(SERVER);\nfunction ChatBox({ match }) {\n    const [state, setstate] = useState(\"\");\n    const dispatch = useDispatch();\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n    const [msg, setmsg] = useState(\"\");\n    const [loader, setloader] = useState(false);\n    const [warning, setWarning] = useState(undefined);\n    var friendId = match?.params.id;\n    let readMsg = useRef();\n\n    useEffect(() => {\n        socket.on('privatemessage', pm => {\n            if (pm.authorId === foundUser._id || pm.authorId === userId) {\n                setNewestSocketPrivateMessage(pm);\n            } else {\n                dispatch(setMessageIsRead({\n                    read: false,\n                    authorId: pm.authorId\n                }));\n            }\n        });\n        return (() => socket.removeAllListeners('privatemessage'));\n    }, [foundUser, userId, dispatch]);\n\n    useEffect(() => {\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n    }, [newestSocketPrivateMessage]);\n\n    useEffect(() => {\n        socket.emit('adduser', userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        });\n        return (() => socket.removeAllListeners('getusers'))\n    }, [userId, username]);\n\n    useEffect(() => {\n        const getData = async () => {\n            if (friendId) {\n                const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                if (returnedUser) {\n                    setFoundUser(returnedUser.data);\n                }\n                const foundMsg = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n                if (foundMsg.data.length > 0) {\n                    setFoundMessages(foundMsg.data);\n                }\n            }\n        }\n        getData();\n    }, [userId, friendId]);\n\n    const readInput = (e) => {\n        setmsg(e.target.value);\n    }\n    const handleFileUpload = (e) => {\n        readMsg.current.value = e.target.files[0].name;\n        setmsg(e.target.files[0]);\n    }\n\n    const closeButtonhandler = () => {\n        setWarning(undefined);\n    }\n\n    const submitHandler = async (e) => {\n        e.preventDefault();\n        //if message has length zero it means either it is a file or user try to send an empty message\n        if (msg.length > 0) {\n            try {\n                let encryptMsg = DoEncrypt(msg);\n                const message = {\n                    author: username,\n                    authorId: userId,\n                    content: encryptMsg,\n                    receiver: foundUser._id,\n                    receiverName: foundUser.name,\n                    participants: [userId, foundUser._id],\n                    type: 'textMessage'\n                }\n                setloader(true);\n                setWarning(\"Reload If Content Like Pics/Videos Did'nt Load Properly!!\")\n                const res = await axios.post(`${SERVER_URL}/messages`, message);\n                setFoundMessages(existingMessages => [\n                    ...existingMessages,\n                    res.data\n                ]);\n                if ([res.data].length > 0) {\n                    socket.emit(\"privatemsg\", message);\n                    setloader(false);\n                }\n                setmsg(\"\");\n                readMsg.current.value = \"\";\n\n            } catch (err) {\n                console.log(err);\n            }\n        }//check that message is file\n        else if (msg.name) {\n            try {\n                let formData = new FormData();\n                formData.append('author', username)\n                formData.append('authorId', userId)\n                formData.append('content', msg)\n                formData.append('receiver', foundUser._id)\n                formData.append('receiverName', foundUser.name)\n                formData.append('participants', [userId, foundUser._id])\n                formData.append('type', '');\n                setloader(true);\n                setWarning(\"Reload If Content Like Pics/Videos Did'nt Load Properly!!\")\n                const res = await axios.post(`${SERVER_URL}/messages`, formData);\n                setFoundMessages(existingMessages => [\n                    ...existingMessages,\n                    res.data\n                ]);\n                // such as Axios or fetch, can accept a FormData object as a body. It is encoded and sent out with Content-Type: multipart/form-data. and value are in form of key and pairs.Method to console log= console.log(...formData);\n                if ([res.data].length > 0) {\n                    socket.emit(\"privatemsg\", res.data);\n                    setloader(false);\n                }\n                setmsg(\"\");\n                readMsg.current.value = \"\";\n\n            } catch (err) {\n                console.log(err);\n            }\n        }\n        else {\n            alert(\"Message Shouldn't be Empty!\")\n        }\n    }\n\n    if (userId) {\n        return (\n            <>\n\n                <div className=\"chatContainer\">\n                    <div className=\"chatContent\">\n                        <UsersList onlineUsers={onlineUsers} foundUser={foundUser} />\n                        <div className=\"rightChatContainer\">\n                            {loader ? <CircularProgress color=\"secondary\" className=\"spinLoader\" /> : \"\"}\n                            {warning && (\n                                <div className=\"error\">\n                                    <span>\n                                        <i className=\"fa fa-exclamation-circle errorIcon\"></i>\n                                        <p> <b>Warning:</b> {warning}</p>\n                                    </span>\n                                    <button onClick={closeButtonhandler}>X</button>\n                                </div>)\n                            }\n                            <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                            <form onSubmit={submitHandler} encType='multipart/form-data'>\n                                <div className=\"sendmsgForm\" >\n                                    <div className=\"sendFormInner\" >\n                                        <input ref={readMsg} disabled={friendId ? false : true} autoComplete=\"off\" onChange={readInput} name=\"inputMsg\" type=\"text\" placeholder=\"Write here....\" />\n                                        <button name=\"inputMsg\" type=\"submit\"> <i className=\"fa fa-send\"></i></button>\n                                    </div>\n                                    <input disabled={friendId ? false : true} onChange={handleFileUpload} type=\"file\" id=\"upload\" hidden />\n                                    <label htmlFor=\"upload\">\n                                        <AddBoxRoundedIcon color=\"secondary\" id=\"Uploadbutton\" />\n                                    </label>\n                                </div>\n                            </form>\n                        </div>\n                    </div >\n                </div >\n\n            </>\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default memo(ChatBox)\n"]},"metadata":{},"sourceType":"module"}