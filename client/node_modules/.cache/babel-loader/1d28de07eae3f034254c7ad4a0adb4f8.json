{"ast":null,"code":"var _jsxFileName = \"/home/nishant007tech/chat-app/client/src/components/chatBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList';\nimport axios from 'axios';\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBox({\n  match,\n  socket\n}) {\n  _s();\n\n  const [state, setstate] = useState(\"\");\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const userId = useSelector(state => state.user_reducer.user);\n  const username = useSelector(state => state.user_reducer.username);\n  const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n  const [foundUser, setFoundUser] = useState({});\n  const [foundMessages, setFoundMessages] = useState([]);\n\n  if (match) {\n    var friendId = match.params.id;\n  } // add User\n\n\n  useEffect(() => {\n    socket.emit(\"adduser\", userId, username);\n    socket.on(\"getusers\", users => {\n      setOnlineUsers([users]);\n    });\n  }, [userId, username]);\n  useEffect(() => {\n    try {\n      let isSubscribed = true;\n\n      const findUser = async () => {\n        if (friendId) {\n          const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n\n          if (returnedUser && isSubscribed) {\n            setFoundUser(returnedUser.data);\n          }\n        }\n      };\n\n      findUser();\n\n      const loadPrivateMessages = async () => {\n        if (foundUser._id) {\n          const foundMessages = await axios.get(`${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`);\n\n          if (foundMessages.data.length > 0 && isSubscribed) {\n            setFoundMessages(foundMessages.data);\n          }\n        }\n      };\n\n      loadPrivateMessages();\n      return () => isSubscribed = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [foundUser._id, friendId, userId]);\n  useEffect(() => {\n    if (socket) {\n      socket.on('privatemessage', pvtMsg => {\n        setNewestSocketPrivateMessage(pvtMsg);\n      });\n    }\n\n    return () => {\n      if (socket) {\n        socket.removeAllListeners();\n      }\n    };\n  }, [socket, foundUser._id, userId]);\n  useEffect(() => {\n    if (newestSocketPrivateMessage) {\n      setFoundMessages(existingMessages => [...existingMessages, newestSocketPrivateMessage]);\n    }\n  }, [newestSocketPrivateMessage]); // useEffect(() => {\n  //     if (socket) {\n  //         socket.emit(\"updateOnlineUsers\");\n  //     }\n  //     return (() => {\n  //         if (socket) {\n  //             socket.removeAllListeners()\n  //         }\n  //     })\n  // }, [])\n\n  if (userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContent\",\n        children: [/*#__PURE__*/_jsxDEV(UsersList, {\n          onlineUsers: onlineUsers,\n          foundUser: foundUser,\n          foundMessages: foundMessages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(ShowMessages, {\n            foundMessages: foundMessages,\n            userId: userId,\n            friendId: friendId,\n            foundUser: foundUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Myinput, {\n            socket: socket,\n            userId: userId,\n            username: username,\n            friendId: friendId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  } else {\n    //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n    setTimeout(() => {\n      setstate(\"Session Expired Please LogIn Again!!!\");\n    }, 500);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 44\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatBox, \"rbQ2h4JvXa8zzsFJciKE1fNmYOE=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/src/components/chatBox.js"],"names":["React","useState","useEffect","useSelector","SERVER","SERVER_URL","UsersList","axios","ShowMessages","Myinput","ChatBox","match","socket","state","setstate","onlineUsers","setOnlineUsers","userId","user_reducer","user","username","newestSocketPrivateMessage","setNewestSocketPrivateMessage","foundUser","setFoundUser","foundMessages","setFoundMessages","friendId","params","id","emit","on","users","isSubscribed","findUser","returnedUser","get","data","loadPrivateMessages","_id","length","error","console","log","pvtMsg","removeAllListeners","existingMessages","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux';\nimport { SERVER, SERVER_URL } from './config';\nimport UsersList from './usersList'\nimport axios from 'axios'\nimport ShowMessages from './showMessages';\nimport Myinput from './myinput';\n\nfunction ChatBox({ match, socket }) {\n    const [state, setstate] = useState(\"\");\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const userId = useSelector(state => state.user_reducer.user);\n    const username = useSelector(state => state.user_reducer.username);\n    const [newestSocketPrivateMessage, setNewestSocketPrivateMessage] = useState(null);\n    const [foundUser, setFoundUser] = useState({});\n    const [foundMessages, setFoundMessages] = useState([]);\n    if (match) {\n        var friendId = match.params.id;\n    }\n\n    // add User\n    useEffect(() => {\n        socket.emit(\"adduser\", userId, username);\n        socket.on(\"getusers\", (users) => {\n            setOnlineUsers([users]);\n        });\n    }, [userId, username]);\n\n\n\n    useEffect(() => {\n        try {\n            let isSubscribed = true;\n            const findUser = async () => {\n                if (friendId) {\n                    const returnedUser = await axios.get(`${SERVER_URL}/userinfo/${friendId}`);\n                    if (returnedUser && isSubscribed) {\n                        setFoundUser(returnedUser.data);\n                    }\n                }\n            };\n            findUser();\n\n            const loadPrivateMessages = async () => {\n                if (foundUser._id) {\n                    const foundMessages = await axios.get(\n                        `${SERVER_URL}/privateconvo?userid=${userId}&friendid=${friendId}`\n                    );\n                    if (foundMessages.data.length > 0 && isSubscribed) {\n                        setFoundMessages(foundMessages.data);\n                    }\n                }\n            };\n            loadPrivateMessages();\n            return () => (isSubscribed = false);\n\n        } catch (error) {\n            console.log(error);\n        }\n    }, [foundUser._id, friendId, userId]);\n\n\n\n    useEffect(() => {\n        if (socket) {\n            socket.on('privatemessage', (pvtMsg) => {\n                setNewestSocketPrivateMessage(pvtMsg);\n            });\n        }\n\n        return () => {\n            if (socket) {\n                socket.removeAllListeners();\n            }\n        };\n    }, [socket, foundUser._id, userId]);\n\n    useEffect(() => {\n        if (newestSocketPrivateMessage) {\n            setFoundMessages(existingMessages => [\n                ...existingMessages,\n                newestSocketPrivateMessage\n            ]);\n        }\n    }, [newestSocketPrivateMessage]);\n    // useEffect(() => {\n    //     if (socket) {\n    //         socket.emit(\"updateOnlineUsers\");\n    //     }\n    //     return (() => {\n    //         if (socket) {\n    //             socket.removeAllListeners()\n    //         }\n    //     })\n    // }, [])\n\n    if (userId) {\n        return (\n            <div className=\"chatContainer\">\n                <div className=\"chatContent\">\n                    <UsersList onlineUsers={onlineUsers} foundUser={foundUser} foundMessages={foundMessages} />\n                    <div className=\"rightChatContainer\">\n                        <ShowMessages foundMessages={foundMessages} userId={userId} friendId={friendId} foundUser={foundUser} />\n                        <Myinput socket={socket} userId={userId} username={username} friendId={friendId} />\n                    </div>\n                </div >\n            </div >\n\n        )\n    } else {\n        //i used settimeout for not showing content immediately after re render...... during component re-render untill fetching userId this content might be visible between renders....!!\n        setTimeout(() => {\n            setstate(\"Session Expired Please LogIn Again!!!\");\n        }, 500);\n        return (\n            <div className=\"chatContainer\"><h2>{state}</h2> </div>\n        )\n    }\n}\n\nexport default ChatBox\n"]},"metadata":{},"sourceType":"module"}