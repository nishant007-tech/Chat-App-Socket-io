{"ast":null,"code":"// Node.js core modules\nvar crypto = require('crypto');\n/**\n * The encryption algorithm (cipher) type to be used.\n * @type {String}\n * @const\n * @private\n */\n\n\nvar CIPHER_ALGORITHM = 'aes-256-ctr'; //\n// Primary API\n//\n\n/**\n * An API to allow for greatly simplified AES-256 encryption and decryption using a passphrase of\n * any length plus a random Initialization Vector.\n * @exports aes256\n * @public\n */\n\nvar aes256 = {\n  /**\n   * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} input  The clear-text message or buffer to be encrypted.\n   * @returns {String|Buffer} A custom-encrypted version of the input.\n   * @public\n   * @method\n   */\n  encrypt: function (key, input) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof input === 'string';\n    var isBuffer = Buffer.isBuffer(input);\n\n    if (!(isString || isBuffer) || isString && !input || isBuffer && !Buffer.byteLength(input)) {\n      throw new TypeError('Provided \"input\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key); // Initialization Vector\n\n    var iv = crypto.randomBytes(16);\n    var cipher = crypto.createCipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n    var buffer = input;\n\n    if (isString) {\n      buffer = Buffer.from(input);\n    }\n\n    var ciphertext = cipher.update(buffer);\n    var encrypted = Buffer.concat([iv, ciphertext, cipher.final()]);\n\n    if (isString) {\n      encrypted = encrypted.toString('base64');\n    }\n\n    return encrypted;\n  },\n\n  /**\n   * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} encrypted  The encrypted message to be decrypted.\n   * @returns {String|Buffer} The original plain-text message or buffer.\n   * @public\n   * @method\n   */\n  decrypt: function (key, encrypted) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof encrypted === 'string';\n    var isBuffer = Buffer.isBuffer(encrypted);\n\n    if (!(isString || isBuffer) || isString && !encrypted || isBuffer && !Buffer.byteLength(encrypted)) {\n      throw new TypeError('Provided \"encrypted\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n    var input = encrypted;\n\n    if (isString) {\n      input = Buffer.from(encrypted, 'base64');\n\n      if (input.length < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    } else {\n      if (Buffer.byteLength(encrypted) < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    } // Initialization Vector\n\n\n    var iv = input.slice(0, 16);\n    var decipher = crypto.createDecipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n    var ciphertext = input.slice(16);\n    var output;\n\n    if (isString) {\n      output = decipher.update(ciphertext) + decipher.final();\n    } else {\n      output = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n    }\n\n    return output;\n  }\n};\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @public\n * @constructor\n */\n\nfunction AesCipher(key) {\n  if (typeof key !== 'string' || !key) {\n    throw new TypeError('Provided \"key\" must be a non-empty string');\n  }\n  /**\n   * A passphrase of any length to used to generate a symmetric session key.\n   * @member {String} key\n   * @readonly\n   */\n\n\n  Object.defineProperty(this, 'key', {\n    value: key\n  });\n}\n/**\n * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n * @param {String} plaintext  The clear-text message to be encrypted.\n * @returns {String} A custom-encrypted version of the input.\n * @public\n * @method\n */\n\n\nAesCipher.prototype.encrypt = function (plaintext) {\n  return aes256.encrypt(this.key, plaintext);\n};\n/**\n * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n * @param {String} encrypted  The encrypted message to be decrypted.\n * @returns {String} The original plain-text message.\n * @public\n * @method\n */\n\n\nAesCipher.prototype.decrypt = function (encrypted) {\n  return aes256.decrypt(this.key, encrypted);\n}; //\n// API Extension\n//\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @returns {AesCipher}\n * @public\n * @method\n */\n\n\naes256.createCipher = function (key) {\n  return new AesCipher(key);\n}; //\n// Export the API\n//\n\n\nmodule.exports = aes256;","map":{"version":3,"sources":["/home/nishant007tech/chat-app/client/node_modules/aes256/index.js"],"names":["crypto","require","CIPHER_ALGORITHM","aes256","encrypt","key","input","TypeError","isString","isBuffer","Buffer","byteLength","sha256","createHash","update","iv","randomBytes","cipher","createCipheriv","digest","buffer","from","ciphertext","encrypted","concat","final","toString","decrypt","length","slice","decipher","createDecipheriv","output","AesCipher","Object","defineProperty","value","prototype","plaintext","createCipher","module","exports"],"mappings":"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","sourcesContent":["// Node.js core modules\nvar crypto = require('crypto');\n\n\n/**\n * The encryption algorithm (cipher) type to be used.\n * @type {String}\n * @const\n * @private\n */\nvar CIPHER_ALGORITHM = 'aes-256-ctr';\n\n\n//\n// Primary API\n//\n\n/**\n * An API to allow for greatly simplified AES-256 encryption and decryption using a passphrase of\n * any length plus a random Initialization Vector.\n * @exports aes256\n * @public\n */\nvar aes256 = {\n\n  /**\n   * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} input  The clear-text message or buffer to be encrypted.\n   * @returns {String|Buffer} A custom-encrypted version of the input.\n   * @public\n   * @method\n   */\n  encrypt: function(key, input) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof input === 'string';\n    var isBuffer = Buffer.isBuffer(input);\n    if (!(isString || isBuffer) || (isString && !input) || (isBuffer && !Buffer.byteLength(input))) {\n      throw new TypeError('Provided \"input\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    // Initialization Vector\n    var iv = crypto.randomBytes(16);\n    var cipher = crypto.createCipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n\n    var buffer = input;\n    if (isString) {\n      buffer = Buffer.from(input);\n    }\n\n    var ciphertext = cipher.update(buffer);\n    var encrypted = Buffer.concat([iv, ciphertext, cipher.final()]);\n\n    if (isString) {\n      encrypted = encrypted.toString('base64');\n    }\n\n    return encrypted;\n  },\n\n  /**\n   * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} encrypted  The encrypted message to be decrypted.\n   * @returns {String|Buffer} The original plain-text message or buffer.\n   * @public\n   * @method\n   */\n  decrypt: function(key, encrypted) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof encrypted === 'string';\n    var isBuffer = Buffer.isBuffer(encrypted);\n    if (!(isString || isBuffer) || (isString && !encrypted) || (isBuffer && !Buffer.byteLength(encrypted))) {\n      throw new TypeError('Provided \"encrypted\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    var input = encrypted;\n    if (isString) {\n      input = Buffer.from(encrypted, 'base64');\n\n      if (input.length < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    } else {\n      if (Buffer.byteLength(encrypted) < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    }\n\n    // Initialization Vector\n    var iv = input.slice(0, 16);\n    var decipher = crypto.createDecipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n\n    var ciphertext = input.slice(16);\n\n    var output;\n    if (isString) {\n      output = decipher.update(ciphertext) + decipher.final();\n    } else {\n      output = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n    }\n\n    return output;\n  }\n\n};\n\n\n\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @public\n * @constructor\n */\nfunction AesCipher(key) {\n  if (typeof key !== 'string' || !key) {\n    throw new TypeError('Provided \"key\" must be a non-empty string');\n  }\n\n  /**\n   * A passphrase of any length to used to generate a symmetric session key.\n   * @member {String} key\n   * @readonly\n   */\n  Object.defineProperty(this, 'key', { value: key });\n\n}\n\n/**\n * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n * @param {String} plaintext  The clear-text message to be encrypted.\n * @returns {String} A custom-encrypted version of the input.\n * @public\n * @method\n */\nAesCipher.prototype.encrypt = function(plaintext) {\n  return aes256.encrypt(this.key, plaintext);\n};\n\n/**\n * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n * @param {String} encrypted  The encrypted message to be decrypted.\n * @returns {String} The original plain-text message.\n * @public\n * @method\n */\nAesCipher.prototype.decrypt = function(encrypted) {\n  return aes256.decrypt(this.key, encrypted);\n};\n\n\n\n\n//\n// API Extension\n//\n\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @returns {AesCipher}\n * @public\n * @method\n */\naes256.createCipher = function(key) {\n  return new AesCipher(key);\n};\n\n\n\n\n//\n// Export the API\n//\n\nmodule.exports = aes256;\n"]},"metadata":{},"sourceType":"script"}